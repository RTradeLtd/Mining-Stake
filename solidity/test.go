// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Test

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// TestABI is the input ABI used to generate the binding from.
const TestABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"ethRewarded\",\"type\":\"uint256\"},{\"name\":\"rtcRewarded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rtcHotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getNumStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINSTAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtHotWallet\",\"type\":\"address\"}],\"name\":\"setRtHotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtcAddress\",\"type\":\"address\"}],\"name\":\"setRtI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtcToStake\",\"type\":\"uint256\"},{\"name\":\"_durationInWeeksToStake\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signUpFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakers\",\"type\":\"address[]\"},{\"name\":\"_rtcPerStaker\",\"type\":\"uint256\"}],\"name\":\"routeRtcRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kiloHashSecondPerRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getRewardStruct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rtI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"rtcStaked\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"khSec\",\"type\":\"uint256\"},{\"name\":\"depositDate\",\"type\":\"uint256\"},{\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakerStruct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULTLOCKUPTIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakers\",\"type\":\"address[]\"},{\"name\":\"_ethPerPerson\",\"type\":\"uint256\"}],\"name\":\"routeEthReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_depositer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weeksStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_khSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RtcReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EthReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"}],\"name\":\"NewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EthUsdPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SignUpFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_adminSet\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_ownershipTransferred\",\"type\":\"bool\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// TestBin is the compiled bytecode used for deploying new contracts.
const TestBin = `606060409081526756bc75e2d6310000600b55600d805461010060a860020a031916740994f9595d28429584bfb5fcbfea75b9c9ea2c240017905560008054600160a060020a0319908116600160a060020a033316908117835560018054909216179055906200013390805190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525060806040519081016040908152604f82527f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6360208301527f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d55908201527f5344292e302e70726963655f7573640000000000000000000000000000000000606082015264010000000062001ce36200015382021704565b6000908152600e60205260409020805460ff1916600117905550620009f1565b6003546000908190600160a060020a031615806200019357506003546200019190600160a060020a0316640100000000620020386200053282021704565b155b15620001b557620001b360006401000000006200203c6200053682021704565b505b600354600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200020e57600080fd5b5af115156200021c57600080fd5b5050506040518051600454600160a060020a039081169116149050620002cd57600354600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200029557600080fd5b5af11515620002a357600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003495780820151838201526020016200032f565b50505050905090810190601f168015620003775780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156200039657600080fd5b5af11515620003a457600080fd5b5050506040518051915050670de0b6b3a764000062030d403a0201811115620003d157600091506200052b565b600454600160a060020a031663adf59f9982600087876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156200045b57808201518382015260200162000441565b50505050905090810190601f168015620004895780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015620004c1578082015183820152602001620004a7565b50505050905090810190601f168015620004ef5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15156200051057600080fd5b5af115156200051e57600080fd5b5050505060405180519250505b5092915050565b3b90565b600062000550640100000000620025416200055682021704565b92915050565b60008062000586731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed640100000000620020386200053282021704565b1115620006085760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed179055620005ff60408051908101604052600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152640100000000620028656200093682021704565b50600162000933565b60006200063773c03a2615d5efaf5f49f60b7bb6583eaec212fdf1640100000000620020386200053282021704565b1115620006b05760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf1179055620005ff60408051908101604052600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152640100000000620028656200093682021704565b6000620006df73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e640100000000620020386200053282021704565b1115620007585760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e179055620005ff60408051908101604052600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152640100000000620028656200093682021704565b60006200078773146500cfd35b22e4a392fe0adc06de1a1368ed48640100000000620020386200053282021704565b1115620008005760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed48179055620005ff60408051908101604052600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152640100000000620028656200093682021704565b60006200082f736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475640100000000620020386200053282021704565b111562000865575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000933565b6000620008947320e12a1f859b3feae5fb2a0a32c18f5a65555bbf640100000000620020386200053282021704565b1115620008ca575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000933565b6000620008f97351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa640100000000620020386200053282021704565b11156200092f575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000933565b5060005b90565b60058180516200094b9291602001906200094f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200099257805160ff1916838001178555620009c2565b82800160010185558215620009c2579182015b82811115620009c2578251825591602001919060010190620009a5565b50620009d0929150620009d4565b5090565b6200093391905b80821115620009d05760008155600101620009db565b6129d48062000a016000396000f3006060604052600436106101715763ffffffff60e060020a600035041663054f7d9c81146101735780630700037d1461019a5780630bc0eadd146101d15780630de9b5191461020057806314d0f1ba146102315780631d0a0e8d1461025057806325d5971f1461026357806327dc297e146102795780633467e9e1146102cf57806338bbfa50146102ee5780633acaa0d7146103865780636b41f41114610399578063704b6c02146103b857806379867480146103d75780637ec59eef146103f65780638da5cb5b1461040f5780639278b587146104225780639342cd0214610435578063ac48bd5a14610486578063acd98bbf14610499578063b62682b6146104ac578063be72ab59146104cb578063c8b6cbf7146104de578063cf30901214610551578063de20e7e914610564578063df9ec0f4146105bf578063dff69787146105d2578063f2fde38b146105e5578063f6c2699f14610604578063f851a4401461064a578063ffa1ad741461065d575b005b341561017e57600080fd5b6101866106e7565b604051901515815260200160405180910390f35b34156101a557600080fd5b6101b9600160a060020a0360043516610708565b60405191825260208201526040908101905180910390f35b34156101dc57600080fd5b6101e4610721565b604051600160a060020a03909116815260200160405180910390f35b341561020b57600080fd5b61021f600160a060020a0360043516610730565b60405190815260200160405180910390f35b341561023c57600080fd5b610186600160a060020a036004351661074b565b341561025b57600080fd5b61021f610760565b341561026e57600080fd5b61018660043561076d565b341561028457600080fd5b610171600480359060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109f895505050505050565b34156102da57600080fd5b61021f600160a060020a0360043516610b27565b34156102f957600080fd5b610171600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610b2295505050505050565b341561039157600080fd5b610186610b39565b34156103a457600080fd5b610186600160a060020a0360043516610d07565b34156103c357600080fd5b610186600160a060020a0360043516610d63565b34156103e257600080fd5b610186600160a060020a0360043516610de8565b341561040157600080fd5b610186600435602435610e56565b341561041a57600080fd5b6101e4611106565b341561042d57600080fd5b61021f611116565b341561044057600080fd5b6101866004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061111c92505050565b341561049157600080fd5b61021f6112ec565b34156104a457600080fd5b61021f6112f2565b34156104b757600080fd5b6101b9600160a060020a03600435166112f8565b34156104d657600080fd5b6101e461131b565b34156104e957600080fd5b610500600160a060020a036004351660243561132f565b604051600160a060020a03909816885260208801969096526040808801959095526060870193909352608086019190915260a085015260c084015290151560e0830152610100909101905180910390f35b341561055c57600080fd5b61018661139d565b341561056f57600080fd5b610586600160a060020a03600435166024356113a6565b60405195865260208601949094526040808601939093526060850191909152608084015290151560a083015260c0909101905180910390f35b34156105ca57600080fd5b61021f611556565b34156105dd57600080fd5b61021f61155d565b34156105f057600080fd5b610186600160a060020a0360043516611563565b610186600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506115ef92505050565b341561065557600080fd5b6101e4611754565b341561066857600080fd5b610670611763565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156106ac578082015183820152602001610694565b50505050905090810190601f1680156106d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60015474010000000000000000000000000000000000000000900460ff1681565b6010602052600090815260409020805460019091015482565b600954600160a060020a031681565b600160a060020a031660009081526011602052604090205490565b60026020526000908152604090205460ff1681565b68056bc75e2d6310000081565b6000803383600f600083600160a060020a0316600160a060020a03168152602001908152602001600020818154811015156107a457fe5b906000526020600020906008020160050154421115156107c357600080fd5b33600160a060020a0381166000908152600f602052604090208054879190829081106107eb57fe5b600091825260209091206007600890920201015460ff16151561080d57600080fd5b600160a060020a0333166000908152600f6020526040812080548990811061083157fe5b90600052602060002090600802016002015411151561084c57fe5b600160a060020a0333166000908152600f6020526040902080548890811061087057fe5b90600052602060002090600802016002015494506000600f600033600160a060020a0316600160a060020a03168152602001908152602001600020888154811015156108b857fe5b6000918252602080832060026008909302019190910192909255600160a060020a0333168152600f909152604081208054899081106108f357fe5b60009182526020909120600890910201600701805460ff19169115159190911790557f7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf73386896040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a1600d546101009004600160a060020a031663a9059cbb338760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109c957600080fd5b5af115156109d657600080fd5b5050506040518051905015156109eb57600080fd5b5060019695505050505050565b600d805460ff191660011790556000610a0f61179a565b600160a060020a031633600160a060020a0316141515610a2e57600080fd5b6000838152600e602052604090205460ff161515610a4b57600080fd5b610a5482611913565b6008819055670de0b6b3a76400009150610a7590829063ffffffff61192616565b600a818155610a8a919063ffffffff61193d16565b600a556008547fb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f9060405190815260200160405180910390a17f72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204600a5460405190815260200160405180910390a16000838152600e60205260409020805460ff19908116909155600d80549091169055610b2261196b565b505050565b60116020526000908152604090205481565b60008054819033600160a060020a0390811691161480610b67575060015433600160a060020a039081169116145b1515610b7257600080fd5b610b97604080519081016040526003815260ea60020a62155493026020820152611afc565b600160a060020a033016311015610bad57600080fd5b7f096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d346040516020808252602f908201527f4f7261636c697a65207175657279207761732073656e742c207374616e64696e6040808301919091527f6720627920666f7220616e73776572000000000000000000000000000000000060608301526080909101905180910390a1610ce260408051908101604052806003815260200160ea60020a6215549302815250608060405190810160405280604f81526020017f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6381526020017f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d5581526020017f5344292e302e70726963655f7573640000000000000000000000000000000000815250611ce3565b6000818152600e60205260409020805460ff19166001908117909155925090505b5090565b6000805433600160a060020a0390811691161480610d33575060015433600160a060020a039081169116145b1515610d3e57600080fd5b5060098054600160a060020a038316600160a060020a03199091161790556001919050565b6000805433600160a060020a03908116911614610d7f57600080fd5b600154600160a060020a0383811691161415610d9a57600080fd5b60018054600160a060020a031916600160a060020a03841690811782557fe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e960405160405180910390a3919050565b6000805433600160a060020a0390811691161480610e14575060015433600160a060020a039081169116145b1515610e1f57600080fd5b50600d8054600160a060020a0383166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556001919050565b600d546000908190819060ff1615610e6d57600080fd5b68056bc75e2d631000008510158015610e87575060048410155b1515610e9257600080fd5b600160a060020a0333166000908152601160205260409020549150610ebe82600163ffffffff61202616565b600160a060020a033316600090815260116020526040902055600b54610eeb90869063ffffffff61193d16565b9050610f0581670de0b6b3a764000063ffffffff61192616565b600160a060020a0333166000908152600f6020526040902080549192509060018101610f31838261287c565b916000526020600020906008020160006101006040519081016040908152600160a060020a0333168252602082018a9052810189905260608101859052426080820181905262093a8089020160a082015260c08101869052600160e082015291905081518154600160a060020a031916600160a060020a03919091161781556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151600791909101805460ff1916911515919091179055507f1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f90503386868486604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1600d54600954600160a060020a036101009092048216916323b872dd913391168860405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156110d957600080fd5b5af115156110e657600080fd5b5050506040518051905015156110fb57600080fd5b506001949350505050565b600054600160a060020a03165b90565b600a5481565b60008054819033600160a060020a039081169116148061114a575060015433600160a060020a039081169116145b151561115557600080fd5b5060005b83518110156112e0576111a9836010600087858151811061117657fe5b90602001906020020151600160a060020a031681526020810191909152604001600020600101549063ffffffff61202616565b601060008684815181106111b957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020600101557fe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e2884828151811061120d57fe5b9060200190602002015184604051600160a060020a03909216825260208201526040908101905180910390a1600d546101009004600160a060020a03166323b872dd3386848151811061125c57fe5b906020019060200201518660405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156112b657600080fd5b5af115156112c357600080fd5b5050506040518051905015156112d857600080fd5b600101611159565b600191505b5092915050565b60085481565b600b5481565b600160a060020a0316600090815260106020526040902080546001909101549091565b600d546101009004600160a060020a031681565b600f6020528160005260406000208181548110151561134a57fe5b600091825260209091206008909102018054600182015460028301546003840154600485015460058601546006870154600790970154600160a060020a0390961698509396509194909391929160ff1688565b600d5460ff1681565b600160a060020a0382166000908152600f6020526040812080548291829182918291829190889081106113d557fe5b906000526020600020906008020160010154600f60008a600160a060020a0316600160a060020a031681526020019081526020016000208881548110151561141957fe5b906000526020600020906008020160030154600f60008b600160a060020a0316600160a060020a031681526020019081526020016000208981548110151561145d57fe5b906000526020600020906008020160040154600f60008c600160a060020a0316600160a060020a031681526020019081526020016000208a8154811015156114a157fe5b906000526020600020906008020160050154600f60008d600160a060020a0316600160a060020a031681526020019081526020016000208b8154811015156114e557fe5b906000526020600020906008020160060154600f60008e600160a060020a0316600160a060020a031681526020019081526020016000208c81548110151561152957fe5b6000918252602090912060089091020160070154949d939c50919a509850965060ff909116945092505050565b6224ea0081565b600c5481565b6000805433600160a060020a0390811691161461157f57600080fd5b600054600160a060020a038381169116141561159a57600080fd5b60008054600160a060020a031916600160a060020a0384811691821790925560019133167f7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa5860405160405180910390a4919050565b60008054819033600160a060020a039081169116148061161d575060015433600160a060020a039081169116145b151561162857600080fd5b5060005b83518110156112e057611679836010600087858151811061164957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff61202616565b6010600086848151811061168957fe5b90602001906020020151600160a060020a031681526020810191909152604001600020557f196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a798482815181106116da57fe5b9060200190602002015184604051600160a060020a03909216825260208201526040908101905180910390a183818151811061171257fe5b90602001906020020151600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561174c57600080fd5b60010161162c565b600154600160a060020a031690565b60408051908101604052600981527f302e302e31626574610000000000000000000000000000000000000000000000602082015281565b600354600090600160a060020a031615806117c757506003546117c590600160a060020a0316612038565b155b156117d8576117d6600061203c565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561181757600080fd5b5af1151561182457600080fd5b5050506040518051600454600160a060020a0390811691161490506118b957600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561188257600080fd5b5af1151561188f57600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118f857600080fd5b5af1151561190557600080fd5b505050604051805191505090565b6000611920826000612046565b92915050565b600080828481151561193457fe5b04949350505050565b6000828202831580611959575082848281151561195657fe5b04145b151561196457600080fd5b9392505050565b6000611992604080519081016040526003815260ea60020a62155493026020820152611afc565b600160a060020a0330163110156119a857600080fd5b7f096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d3460405160208082526035908201527f4f7261636c697a65207175657279207761732073656e742c207374616e64696e6040808301919091527f6720627920666f722074686520616e737765722e2e000000000000000000000060608301526080909101905180910390a1611ae061025860408051908101604052806003815260200160ea60020a6215549302815250608060405190810160405280604f81526020017f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6381526020017f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d5581526020017f5344292e302e70726963655f75736400000000000000000000000000000000008152506121fc565b6000908152600e60205260409020805460ff1916600117905550565b600354600090600160a060020a03161580611b295750600354611b2790600160a060020a0316612038565b155b15611b3a57611b38600061203c565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b7957600080fd5b5af11515611b8657600080fd5b5050506040518051600454600160a060020a039081169116149050611c1b57600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611be457600080fd5b5af11515611bf157600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c7c578082015183820152602001611c64565b50505050905090810190601f168015611ca95780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611cc757600080fd5b5af11515611cd457600080fd5b50505060405180519392505050565b6003546000908190600160a060020a03161580611d125750600354611d1090600160a060020a0316612038565b155b15611d2357611d21600061203c565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d6257600080fd5b5af11515611d6f57600080fd5b5050506040518051600454600160a060020a039081169116149050611e0457600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611dcd57600080fd5b5af11515611dda57600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e65578082015183820152602001611e4d565b50505050905090810190601f168015611e925780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611eb057600080fd5b5af11515611ebd57600080fd5b5050506040518051915050670de0b6b3a764000062030d403a0201811115611ee857600091506112e5565b600454600160a060020a031663adf59f9982600087876040518563ffffffff1660e060020a028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f57578082015183820152602001611f3f565b50505050905090810190601f168015611f845780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611fba578082015183820152602001611fa2565b50505050905090810190601f168015611fe75780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561200757600080fd5b5af1151561201457600080fd5b50505050604051805195945050505050565b60008282018381101561196457600080fd5b3b90565b6000611920612541565b60006120506128a8565b5082600080805b83518110156121df577f300000000000000000000000000000000000000000000000000000000000000084828151811061208d57fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015801561212e57507f39000000000000000000000000000000000000000000000000000000000000008482815181106120f757fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1561218457811561214d57851515612145576121df565b600019909501945b600a83029250603084828151811061216157fe5b016020015160f860020a900460f860020a0260f860020a900403830192506121d7565b83818151811061219057fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916602e60f860020a0214156121d757600191505b600101612057565b60008611156121f15785600a0a830292505b509095945050505050565b6003546000908190600160a060020a0316158061222b575060035461222990600160a060020a0316612038565b155b1561223c5761223a600061203c565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561227b57600080fd5b5af1151561228857600080fd5b5050506040518051600454600160a060020a03908116911614905061231d57600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156122e657600080fd5b5af115156122f357600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561237e578082015183820152602001612366565b50505050905090810190601f1680156123ab5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156123c957600080fd5b5af115156123d657600080fd5b5050506040518051915050670de0b6b3a764000062030d403a02018111156124015760009150612539565b600454600160a060020a031663adf59f99828787876040518563ffffffff1660e060020a028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561246f578082015183820152602001612457565b50505050905090810190601f16801561249c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156124d25780820151838201526020016124ba565b50505050905090810190601f1680156124ff5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b151561251f57600080fd5b5af1151561252c57600080fd5b5050505060405180519250505b509392505050565b600080612561731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed612038565b11156125d15760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed1790556125c960408051908101604052600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152612865565b506001611113565b60006125f073c03a2615d5efaf5f49f60b7bb6583eaec212fdf1612038565b11156126585760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf11790556125c960408051908101604052600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152612865565b600061267773b7a07bcf2ba2f2703b24c0691b5278999c59ac7e612038565b11156126df5760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e1790556125c960408051908101604052600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152612865565b60006126fe73146500cfd35b22e4a392fe0adc06de1a1368ed48612038565b11156127665760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed481790556125c960408051908101604052600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152612865565b6000612785736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475612038565b11156127b9575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001611113565b60006127d87320e12a1f859b3feae5fb2a0a32c18f5a65555bbf612038565b111561280c575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001611113565b600061282b7351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa612038565b111561285f575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001611113565b50600090565b60058180516128789291602001906128ba565b5050565b815481835581811511610b2257600802816008028360005260206000209182019101610b229190612934565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128fb57805160ff1916838001178555612928565b82800160010185558215612928579182015b8281111561292857825182559160200191906001019061290d565b50610d0392915061298e565b61111391905b80821115610d03578054600160a060020a031916815560006001820181905560028201819055600382018190556004820181905560058201819055600682015560078101805460ff1916905560080161293a565b61111391905b80821115610d0357600081556001016129945600a165627a7a723058206de5d4f2a31a4ac44d071059ec054de26daeef673aa0ab7486a473218cafacac0029`

// DeployTest deploys a new Ethereum contract, binding an instance of Test to it.
func DeployTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Test, error) {
	parsed, err := abi.JSON(strings.NewReader(TestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Test{TestCaller: TestCaller{contract: contract}, TestTransactor: TestTransactor{contract: contract}, TestFilterer: TestFilterer{contract: contract}}, nil
}

// Test is an auto generated Go binding around an Ethereum contract.
type Test struct {
	TestCaller     // Read-only binding to the contract
	TestTransactor // Write-only binding to the contract
	TestFilterer   // Log filterer for contract events
}

// TestCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestSession struct {
	Contract     *Test             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestCallerSession struct {
	Contract *TestCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestTransactorSession struct {
	Contract     *TestTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestRaw struct {
	Contract *Test // Generic contract binding to access the raw methods on
}

// TestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestCallerRaw struct {
	Contract *TestCaller // Generic read-only contract binding to access the raw methods on
}

// TestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestTransactorRaw struct {
	Contract *TestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTest creates a new instance of Test, bound to a specific deployed contract.
func NewTest(address common.Address, backend bind.ContractBackend) (*Test, error) {
	contract, err := bindTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Test{TestCaller: TestCaller{contract: contract}, TestTransactor: TestTransactor{contract: contract}, TestFilterer: TestFilterer{contract: contract}}, nil
}

// NewTestCaller creates a new read-only instance of Test, bound to a specific deployed contract.
func NewTestCaller(address common.Address, caller bind.ContractCaller) (*TestCaller, error) {
	contract, err := bindTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestCaller{contract: contract}, nil
}

// NewTestTransactor creates a new write-only instance of Test, bound to a specific deployed contract.
func NewTestTransactor(address common.Address, transactor bind.ContractTransactor) (*TestTransactor, error) {
	contract, err := bindTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestTransactor{contract: contract}, nil
}

// NewTestFilterer creates a new log filterer instance of Test, bound to a specific deployed contract.
func NewTestFilterer(address common.Address, filterer bind.ContractFilterer) (*TestFilterer, error) {
	contract, err := bindTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestFilterer{contract: contract}, nil
}

// bindTest binds a generic wrapper to an already deployed contract.
func bindTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Test *TestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Test.Contract.TestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Test *TestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Test.Contract.TestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Test *TestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Test.Contract.TestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Test *TestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Test.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Test *TestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Test.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Test *TestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Test.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_Test *TestCaller) DEFAULTLOCKUPTIME(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "DEFAULTLOCKUPTIME")
	return *ret0, err
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_Test *TestSession) DEFAULTLOCKUPTIME() (*big.Int, error) {
	return _Test.Contract.DEFAULTLOCKUPTIME(&_Test.CallOpts)
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_Test *TestCallerSession) DEFAULTLOCKUPTIME() (*big.Int, error) {
	return _Test.Contract.DEFAULTLOCKUPTIME(&_Test.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_Test *TestCaller) MINSTAKE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "MINSTAKE")
	return *ret0, err
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_Test *TestSession) MINSTAKE() (*big.Int, error) {
	return _Test.Contract.MINSTAKE(&_Test.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_Test *TestCallerSession) MINSTAKE() (*big.Int, error) {
	return _Test.Contract.MINSTAKE(&_Test.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_Test *TestCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "VERSION")
	return *ret0, err
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_Test *TestSession) VERSION() (string, error) {
	return _Test.Contract.VERSION(&_Test.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_Test *TestCallerSession) VERSION() (string, error) {
	return _Test.Contract.VERSION(&_Test.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Test *TestCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Test *TestSession) Admin() (common.Address, error) {
	return _Test.Contract.Admin(&_Test.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Test *TestCallerSession) Admin() (common.Address, error) {
	return _Test.Contract.Admin(&_Test.CallOpts)
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_Test *TestCaller) EthUSD(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "ethUSD")
	return *ret0, err
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_Test *TestSession) EthUSD() (*big.Int, error) {
	return _Test.Contract.EthUSD(&_Test.CallOpts)
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_Test *TestCallerSession) EthUSD() (*big.Int, error) {
	return _Test.Contract.EthUSD(&_Test.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_Test *TestCaller) Frozen(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "frozen")
	return *ret0, err
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_Test *TestSession) Frozen() (bool, error) {
	return _Test.Contract.Frozen(&_Test.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_Test *TestCallerSession) Frozen() (bool, error) {
	return _Test.Contract.Frozen(&_Test.CallOpts)
}

// GetNumStakes is a free data retrieval call binding the contract method 0x0de9b519.
//
// Solidity: function getNumStakes(_staker address) constant returns(uint256)
func (_Test *TestCaller) GetNumStakes(opts *bind.CallOpts, _staker common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "getNumStakes", _staker)
	return *ret0, err
}

// GetNumStakes is a free data retrieval call binding the contract method 0x0de9b519.
//
// Solidity: function getNumStakes(_staker address) constant returns(uint256)
func (_Test *TestSession) GetNumStakes(_staker common.Address) (*big.Int, error) {
	return _Test.Contract.GetNumStakes(&_Test.CallOpts, _staker)
}

// GetNumStakes is a free data retrieval call binding the contract method 0x0de9b519.
//
// Solidity: function getNumStakes(_staker address) constant returns(uint256)
func (_Test *TestCallerSession) GetNumStakes(_staker common.Address) (*big.Int, error) {
	return _Test.Contract.GetNumStakes(&_Test.CallOpts, _staker)
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_Test *TestCaller) GetRewardStruct(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Test.contract.Call(opts, out, "getRewardStruct", _staker)
	return *ret0, *ret1, err
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_Test *TestSession) GetRewardStruct(_staker common.Address) (*big.Int, *big.Int, error) {
	return _Test.Contract.GetRewardStruct(&_Test.CallOpts, _staker)
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_Test *TestCallerSession) GetRewardStruct(_staker common.Address) (*big.Int, *big.Int, error) {
	return _Test.Contract.GetRewardStruct(&_Test.CallOpts, _staker)
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_Test *TestCaller) GetStakerStruct(opts *bind.CallOpts, _staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
		ret4 = new(*big.Int)
		ret5 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
	}
	err := _Test.contract.Call(opts, out, "getStakerStruct", _staker, _id)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, err
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_Test *TestSession) GetStakerStruct(_staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	return _Test.Contract.GetStakerStruct(&_Test.CallOpts, _staker, _id)
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_Test *TestCallerSession) GetStakerStruct(_staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	return _Test.Contract.GetStakerStruct(&_Test.CallOpts, _staker, _id)
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_Test *TestCaller) KiloHashSecondPerRtc(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "kiloHashSecondPerRtc")
	return *ret0, err
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_Test *TestSession) KiloHashSecondPerRtc() (*big.Int, error) {
	return _Test.Contract.KiloHashSecondPerRtc(&_Test.CallOpts)
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_Test *TestCallerSession) KiloHashSecondPerRtc() (*big.Int, error) {
	return _Test.Contract.KiloHashSecondPerRtc(&_Test.CallOpts)
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_Test *TestCaller) Locked(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "locked")
	return *ret0, err
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_Test *TestSession) Locked() (bool, error) {
	return _Test.Contract.Locked(&_Test.CallOpts)
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_Test *TestCallerSession) Locked() (bool, error) {
	return _Test.Contract.Locked(&_Test.CallOpts)
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_Test *TestCaller) Moderators(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "moderators", arg0)
	return *ret0, err
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_Test *TestSession) Moderators(arg0 common.Address) (bool, error) {
	return _Test.Contract.Moderators(&_Test.CallOpts, arg0)
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_Test *TestCallerSession) Moderators(arg0 common.Address) (bool, error) {
	return _Test.Contract.Moderators(&_Test.CallOpts, arg0)
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_Test *TestCaller) NumStakes(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "numStakes", arg0)
	return *ret0, err
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_Test *TestSession) NumStakes(arg0 common.Address) (*big.Int, error) {
	return _Test.Contract.NumStakes(&_Test.CallOpts, arg0)
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_Test *TestCallerSession) NumStakes(arg0 common.Address) (*big.Int, error) {
	return _Test.Contract.NumStakes(&_Test.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Test *TestCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Test *TestSession) Owner() (common.Address, error) {
	return _Test.Contract.Owner(&_Test.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Test *TestCallerSession) Owner() (common.Address, error) {
	return _Test.Contract.Owner(&_Test.CallOpts)
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_Test *TestCaller) Rewards(opts *bind.CallOpts, arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	ret := new(struct {
		EthRewarded *big.Int
		RtcRewarded *big.Int
	})
	out := ret
	err := _Test.contract.Call(opts, out, "rewards", arg0)
	return *ret, err
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_Test *TestSession) Rewards(arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	return _Test.Contract.Rewards(&_Test.CallOpts, arg0)
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_Test *TestCallerSession) Rewards(arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	return _Test.Contract.Rewards(&_Test.CallOpts, arg0)
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_Test *TestCaller) RtI(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "rtI")
	return *ret0, err
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_Test *TestSession) RtI() (common.Address, error) {
	return _Test.Contract.RtI(&_Test.CallOpts)
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_Test *TestCallerSession) RtI() (common.Address, error) {
	return _Test.Contract.RtI(&_Test.CallOpts)
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_Test *TestCaller) RtcHotWallet(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "rtcHotWallet")
	return *ret0, err
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_Test *TestSession) RtcHotWallet() (common.Address, error) {
	return _Test.Contract.RtcHotWallet(&_Test.CallOpts)
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_Test *TestCallerSession) RtcHotWallet() (common.Address, error) {
	return _Test.Contract.RtcHotWallet(&_Test.CallOpts)
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_Test *TestCaller) SignUpFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "signUpFee")
	return *ret0, err
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_Test *TestSession) SignUpFee() (*big.Int, error) {
	return _Test.Contract.SignUpFee(&_Test.CallOpts)
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_Test *TestCallerSession) SignUpFee() (*big.Int, error) {
	return _Test.Contract.SignUpFee(&_Test.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_Test *TestCaller) StakerCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Test.contract.Call(opts, out, "stakerCount")
	return *ret0, err
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_Test *TestSession) StakerCount() (*big.Int, error) {
	return _Test.Contract.StakerCount(&_Test.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_Test *TestCallerSession) StakerCount() (*big.Int, error) {
	return _Test.Contract.StakerCount(&_Test.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_Test *TestCaller) Stakers(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	ret := new(struct {
		Addr        common.Address
		RtcStaked   *big.Int
		Deposit     *big.Int
		KhSec       *big.Int
		DepositDate *big.Int
		ReleaseDate *big.Int
		Id          *big.Int
		Enabled     bool
	})
	out := ret
	err := _Test.contract.Call(opts, out, "stakers", arg0, arg1)
	return *ret, err
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_Test *TestSession) Stakers(arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	return _Test.Contract.Stakers(&_Test.CallOpts, arg0, arg1)
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_Test *TestCallerSession) Stakers(arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	return _Test.Contract.Stakers(&_Test.CallOpts, arg0, arg1)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_Test *TestTransactor) Callback(opts *bind.TransactOpts, myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "__callback", myid, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_Test *TestSession) Callback(myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Test.Contract.Callback(&_Test.TransactOpts, myid, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_Test *TestTransactorSession) Callback(myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _Test.Contract.Callback(&_Test.TransactOpts, myid, result, proof)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_Test *TestTransactor) DepositStake(opts *bind.TransactOpts, _rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "depositStake", _rtcToStake, _durationInWeeksToStake)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_Test *TestSession) DepositStake(_rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _Test.Contract.DepositStake(&_Test.TransactOpts, _rtcToStake, _durationInWeeksToStake)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_Test *TestTransactorSession) DepositStake(_rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _Test.Contract.DepositStake(&_Test.TransactOpts, _rtcToStake, _durationInWeeksToStake)
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_Test *TestTransactor) ForceUpdate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "forceUpdate")
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_Test *TestSession) ForceUpdate() (*types.Transaction, error) {
	return _Test.Contract.ForceUpdate(&_Test.TransactOpts)
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_Test *TestTransactorSession) ForceUpdate() (*types.Transaction, error) {
	return _Test.Contract.ForceUpdate(&_Test.TransactOpts)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_Test *TestTransactor) RouteEthReward(opts *bind.TransactOpts, _stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "routeEthReward", _stakers, _ethPerPerson)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_Test *TestSession) RouteEthReward(_stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _Test.Contract.RouteEthReward(&_Test.TransactOpts, _stakers, _ethPerPerson)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_Test *TestTransactorSession) RouteEthReward(_stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _Test.Contract.RouteEthReward(&_Test.TransactOpts, _stakers, _ethPerPerson)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_Test *TestTransactor) RouteRtcRewards(opts *bind.TransactOpts, _stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "routeRtcRewards", _stakers, _rtcPerStaker)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_Test *TestSession) RouteRtcRewards(_stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _Test.Contract.RouteRtcRewards(&_Test.TransactOpts, _stakers, _rtcPerStaker)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_Test *TestTransactorSession) RouteRtcRewards(_stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _Test.Contract.RouteRtcRewards(&_Test.TransactOpts, _stakers, _rtcPerStaker)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_Test *TestTransactor) SetAdmin(opts *bind.TransactOpts, _newAdmin common.Address) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "setAdmin", _newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_Test *TestSession) SetAdmin(_newAdmin common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetAdmin(&_Test.TransactOpts, _newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_Test *TestTransactorSession) SetAdmin(_newAdmin common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetAdmin(&_Test.TransactOpts, _newAdmin)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_Test *TestTransactor) SetRtHotWallet(opts *bind.TransactOpts, _rtHotWallet common.Address) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "setRtHotWallet", _rtHotWallet)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_Test *TestSession) SetRtHotWallet(_rtHotWallet common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetRtHotWallet(&_Test.TransactOpts, _rtHotWallet)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_Test *TestTransactorSession) SetRtHotWallet(_rtHotWallet common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetRtHotWallet(&_Test.TransactOpts, _rtHotWallet)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_Test *TestTransactor) SetRtI(opts *bind.TransactOpts, _rtcAddress common.Address) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "setRtI", _rtcAddress)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_Test *TestSession) SetRtI(_rtcAddress common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetRtI(&_Test.TransactOpts, _rtcAddress)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_Test *TestTransactorSession) SetRtI(_rtcAddress common.Address) (*types.Transaction, error) {
	return _Test.Contract.SetRtI(&_Test.TransactOpts, _rtcAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_Test *TestTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_Test *TestSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Test.Contract.TransferOwnership(&_Test.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_Test *TestTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Test.Contract.TransferOwnership(&_Test.TransactOpts, _newOwner)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_Test *TestTransactor) WithdrawStake(opts *bind.TransactOpts, _stakeId *big.Int) (*types.Transaction, error) {
	return _Test.contract.Transact(opts, "withdrawStake", _stakeId)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_Test *TestSession) WithdrawStake(_stakeId *big.Int) (*types.Transaction, error) {
	return _Test.Contract.WithdrawStake(&_Test.TransactOpts, _stakeId)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_Test *TestTransactorSession) WithdrawStake(_stakeId *big.Int) (*types.Transaction, error) {
	return _Test.Contract.WithdrawStake(&_Test.TransactOpts, _stakeId)
}

// TestAdminSetIterator is returned from FilterAdminSet and is used to iterate over the raw logs and unpacked data for AdminSet events raised by the Test contract.
type TestAdminSetIterator struct {
	Event *TestAdminSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestAdminSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestAdminSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestAdminSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestAdminSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestAdminSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestAdminSet represents a AdminSet event raised by the Test contract.
type TestAdminSet struct {
	Admin    common.Address
	AdminSet bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAdminSet is a free log retrieval operation binding the contract event 0xe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e9.
//
// Solidity: event AdminSet(_admin indexed address, _adminSet indexed bool)
func (_Test *TestFilterer) FilterAdminSet(opts *bind.FilterOpts, _admin []common.Address, _adminSet []bool) (*TestAdminSetIterator, error) {

	var _adminRule []interface{}
	for _, _adminItem := range _admin {
		_adminRule = append(_adminRule, _adminItem)
	}
	var _adminSetRule []interface{}
	for _, _adminSetItem := range _adminSet {
		_adminSetRule = append(_adminSetRule, _adminSetItem)
	}

	logs, sub, err := _Test.contract.FilterLogs(opts, "AdminSet", _adminRule, _adminSetRule)
	if err != nil {
		return nil, err
	}
	return &TestAdminSetIterator{contract: _Test.contract, event: "AdminSet", logs: logs, sub: sub}, nil
}

// WatchAdminSet is a free log subscription operation binding the contract event 0xe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e9.
//
// Solidity: event AdminSet(_admin indexed address, _adminSet indexed bool)
func (_Test *TestFilterer) WatchAdminSet(opts *bind.WatchOpts, sink chan<- *TestAdminSet, _admin []common.Address, _adminSet []bool) (event.Subscription, error) {

	var _adminRule []interface{}
	for _, _adminItem := range _admin {
		_adminRule = append(_adminRule, _adminItem)
	}
	var _adminSetRule []interface{}
	for _, _adminSetItem := range _adminSet {
		_adminSetRule = append(_adminSetRule, _adminSetItem)
	}

	logs, sub, err := _Test.contract.WatchLogs(opts, "AdminSet", _adminRule, _adminSetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestAdminSet)
				if err := _Test.contract.UnpackLog(event, "AdminSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestDepositWithdrawnIterator is returned from FilterDepositWithdrawn and is used to iterate over the raw logs and unpacked data for DepositWithdrawn events raised by the Test contract.
type TestDepositWithdrawnIterator struct {
	Event *TestDepositWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestDepositWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestDepositWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestDepositWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestDepositWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestDepositWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestDepositWithdrawn represents a DepositWithdrawn event raised by the Test contract.
type TestDepositWithdrawn struct {
	Staker  common.Address
	Amount  *big.Int
	StakeId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositWithdrawn is a free log retrieval operation binding the contract event 0x7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf7.
//
// Solidity: event DepositWithdrawn(_staker address, _amount uint256, _stakeId uint256)
func (_Test *TestFilterer) FilterDepositWithdrawn(opts *bind.FilterOpts) (*TestDepositWithdrawnIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "DepositWithdrawn")
	if err != nil {
		return nil, err
	}
	return &TestDepositWithdrawnIterator{contract: _Test.contract, event: "DepositWithdrawn", logs: logs, sub: sub}, nil
}

// WatchDepositWithdrawn is a free log subscription operation binding the contract event 0x7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf7.
//
// Solidity: event DepositWithdrawn(_staker address, _amount uint256, _stakeId uint256)
func (_Test *TestFilterer) WatchDepositWithdrawn(opts *bind.WatchOpts, sink chan<- *TestDepositWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "DepositWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestDepositWithdrawn)
				if err := _Test.contract.UnpackLog(event, "DepositWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestEthRewardIterator is returned from FilterEthReward and is used to iterate over the raw logs and unpacked data for EthReward events raised by the Test contract.
type TestEthRewardIterator struct {
	Event *TestEthReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestEthRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestEthReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestEthReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestEthRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestEthRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestEthReward represents a EthReward event raised by the Test contract.
type TestEthReward struct {
	Staker common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEthReward is a free log retrieval operation binding the contract event 0x196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a79.
//
// Solidity: event EthReward(_staker address, _amount uint256)
func (_Test *TestFilterer) FilterEthReward(opts *bind.FilterOpts) (*TestEthRewardIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "EthReward")
	if err != nil {
		return nil, err
	}
	return &TestEthRewardIterator{contract: _Test.contract, event: "EthReward", logs: logs, sub: sub}, nil
}

// WatchEthReward is a free log subscription operation binding the contract event 0x196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a79.
//
// Solidity: event EthReward(_staker address, _amount uint256)
func (_Test *TestFilterer) WatchEthReward(opts *bind.WatchOpts, sink chan<- *TestEthReward) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "EthReward")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestEthReward)
				if err := _Test.contract.UnpackLog(event, "EthReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestEthUsdPriceUpdatedIterator is returned from FilterEthUsdPriceUpdated and is used to iterate over the raw logs and unpacked data for EthUsdPriceUpdated events raised by the Test contract.
type TestEthUsdPriceUpdatedIterator struct {
	Event *TestEthUsdPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestEthUsdPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestEthUsdPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestEthUsdPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestEthUsdPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestEthUsdPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestEthUsdPriceUpdated represents a EthUsdPriceUpdated event raised by the Test contract.
type TestEthUsdPriceUpdated struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEthUsdPriceUpdated is a free log retrieval operation binding the contract event 0xb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f.
//
// Solidity: event EthUsdPriceUpdated(price uint256)
func (_Test *TestFilterer) FilterEthUsdPriceUpdated(opts *bind.FilterOpts) (*TestEthUsdPriceUpdatedIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "EthUsdPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &TestEthUsdPriceUpdatedIterator{contract: _Test.contract, event: "EthUsdPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchEthUsdPriceUpdated is a free log subscription operation binding the contract event 0xb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f.
//
// Solidity: event EthUsdPriceUpdated(price uint256)
func (_Test *TestFilterer) WatchEthUsdPriceUpdated(opts *bind.WatchOpts, sink chan<- *TestEthUsdPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "EthUsdPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestEthUsdPriceUpdated)
				if err := _Test.contract.UnpackLog(event, "EthUsdPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestEthWithdrawnIterator is returned from FilterEthWithdrawn and is used to iterate over the raw logs and unpacked data for EthWithdrawn events raised by the Test contract.
type TestEthWithdrawnIterator struct {
	Event *TestEthWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestEthWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestEthWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestEthWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestEthWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestEthWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestEthWithdrawn represents a EthWithdrawn event raised by the Test contract.
type TestEthWithdrawn struct {
	Withdrawer common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEthWithdrawn is a free log retrieval operation binding the contract event 0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b.
//
// Solidity: event EthWithdrawn(_withdrawer address, _amount uint256)
func (_Test *TestFilterer) FilterEthWithdrawn(opts *bind.FilterOpts) (*TestEthWithdrawnIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "EthWithdrawn")
	if err != nil {
		return nil, err
	}
	return &TestEthWithdrawnIterator{contract: _Test.contract, event: "EthWithdrawn", logs: logs, sub: sub}, nil
}

// WatchEthWithdrawn is a free log subscription operation binding the contract event 0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b.
//
// Solidity: event EthWithdrawn(_withdrawer address, _amount uint256)
func (_Test *TestFilterer) WatchEthWithdrawn(opts *bind.WatchOpts, sink chan<- *TestEthWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "EthWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestEthWithdrawn)
				if err := _Test.contract.UnpackLog(event, "EthWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestNewOraclizeQueryIterator is returned from FilterNewOraclizeQuery and is used to iterate over the raw logs and unpacked data for NewOraclizeQuery events raised by the Test contract.
type TestNewOraclizeQueryIterator struct {
	Event *TestNewOraclizeQuery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestNewOraclizeQueryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestNewOraclizeQuery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestNewOraclizeQuery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestNewOraclizeQueryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestNewOraclizeQueryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestNewOraclizeQuery represents a NewOraclizeQuery event raised by the Test contract.
type TestNewOraclizeQuery struct {
	Result string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewOraclizeQuery is a free log retrieval operation binding the contract event 0x096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d34.
//
// Solidity: event NewOraclizeQuery(result string)
func (_Test *TestFilterer) FilterNewOraclizeQuery(opts *bind.FilterOpts) (*TestNewOraclizeQueryIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "NewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return &TestNewOraclizeQueryIterator{contract: _Test.contract, event: "NewOraclizeQuery", logs: logs, sub: sub}, nil
}

// WatchNewOraclizeQuery is a free log subscription operation binding the contract event 0x096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d34.
//
// Solidity: event NewOraclizeQuery(result string)
func (_Test *TestFilterer) WatchNewOraclizeQuery(opts *bind.WatchOpts, sink chan<- *TestNewOraclizeQuery) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "NewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestNewOraclizeQuery)
				if err := _Test.contract.UnpackLog(event, "NewOraclizeQuery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Test contract.
type TestOwnershipTransferredIterator struct {
	Event *TestOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestOwnershipTransferred represents a OwnershipTransferred event raised by the Test contract.
type TestOwnershipTransferred struct {
	PreviousOwner        common.Address
	NewOwner             common.Address
	OwnershipTransferred bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa58.
//
// Solidity: event OwnershipTransferred(_previousOwner indexed address, _newOwner indexed address, _ownershipTransferred indexed bool)
func (_Test *TestFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, _previousOwner []common.Address, _newOwner []common.Address, _ownershipTransferred []bool) (*TestOwnershipTransferredIterator, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}
	var _ownershipTransferredRule []interface{}
	for _, _ownershipTransferredItem := range _ownershipTransferred {
		_ownershipTransferredRule = append(_ownershipTransferredRule, _ownershipTransferredItem)
	}

	logs, sub, err := _Test.contract.FilterLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule, _ownershipTransferredRule)
	if err != nil {
		return nil, err
	}
	return &TestOwnershipTransferredIterator{contract: _Test.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa58.
//
// Solidity: event OwnershipTransferred(_previousOwner indexed address, _newOwner indexed address, _ownershipTransferred indexed bool)
func (_Test *TestFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TestOwnershipTransferred, _previousOwner []common.Address, _newOwner []common.Address, _ownershipTransferred []bool) (event.Subscription, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}
	var _ownershipTransferredRule []interface{}
	for _, _ownershipTransferredItem := range _ownershipTransferred {
		_ownershipTransferredRule = append(_ownershipTransferredRule, _ownershipTransferredItem)
	}

	logs, sub, err := _Test.contract.WatchLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule, _ownershipTransferredRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestOwnershipTransferred)
				if err := _Test.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestRtcRewardIterator is returned from FilterRtcReward and is used to iterate over the raw logs and unpacked data for RtcReward events raised by the Test contract.
type TestRtcRewardIterator struct {
	Event *TestRtcReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestRtcRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestRtcReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestRtcReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestRtcRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestRtcRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestRtcReward represents a RtcReward event raised by the Test contract.
type TestRtcReward struct {
	Staker common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRtcReward is a free log retrieval operation binding the contract event 0xe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e28.
//
// Solidity: event RtcReward(_staker address, _amount uint256)
func (_Test *TestFilterer) FilterRtcReward(opts *bind.FilterOpts) (*TestRtcRewardIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "RtcReward")
	if err != nil {
		return nil, err
	}
	return &TestRtcRewardIterator{contract: _Test.contract, event: "RtcReward", logs: logs, sub: sub}, nil
}

// WatchRtcReward is a free log subscription operation binding the contract event 0xe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e28.
//
// Solidity: event RtcReward(_staker address, _amount uint256)
func (_Test *TestFilterer) WatchRtcReward(opts *bind.WatchOpts, sink chan<- *TestRtcReward) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "RtcReward")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestRtcReward)
				if err := _Test.contract.UnpackLog(event, "RtcReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestSignUpFeeUpdatedIterator is returned from FilterSignUpFeeUpdated and is used to iterate over the raw logs and unpacked data for SignUpFeeUpdated events raised by the Test contract.
type TestSignUpFeeUpdatedIterator struct {
	Event *TestSignUpFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestSignUpFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestSignUpFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestSignUpFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestSignUpFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestSignUpFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestSignUpFeeUpdated represents a SignUpFeeUpdated event raised by the Test contract.
type TestSignUpFeeUpdated struct {
	Fee *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSignUpFeeUpdated is a free log retrieval operation binding the contract event 0x72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204.
//
// Solidity: event SignUpFeeUpdated(fee uint256)
func (_Test *TestFilterer) FilterSignUpFeeUpdated(opts *bind.FilterOpts) (*TestSignUpFeeUpdatedIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "SignUpFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &TestSignUpFeeUpdatedIterator{contract: _Test.contract, event: "SignUpFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchSignUpFeeUpdated is a free log subscription operation binding the contract event 0x72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204.
//
// Solidity: event SignUpFeeUpdated(fee uint256)
func (_Test *TestFilterer) WatchSignUpFeeUpdated(opts *bind.WatchOpts, sink chan<- *TestSignUpFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "SignUpFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestSignUpFeeUpdated)
				if err := _Test.contract.UnpackLog(event, "SignUpFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TestStakeDepositedIterator is returned from FilterStakeDeposited and is used to iterate over the raw logs and unpacked data for StakeDeposited events raised by the Test contract.
type TestStakeDepositedIterator struct {
	Event *TestStakeDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestStakeDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestStakeDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestStakeDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestStakeDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestStakeDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestStakeDeposited represents a StakeDeposited event raised by the Test contract.
type TestStakeDeposited struct {
	Depositer   common.Address
	Amount      *big.Int
	WeeksStaked *big.Int
	KhSec       *big.Int
	Id          *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStakeDeposited is a free log retrieval operation binding the contract event 0x1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f.
//
// Solidity: event StakeDeposited(_depositer address, _amount uint256, _weeksStaked uint256, _khSec uint256, _id uint256)
func (_Test *TestFilterer) FilterStakeDeposited(opts *bind.FilterOpts) (*TestStakeDepositedIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "StakeDeposited")
	if err != nil {
		return nil, err
	}
	return &TestStakeDepositedIterator{contract: _Test.contract, event: "StakeDeposited", logs: logs, sub: sub}, nil
}

// WatchStakeDeposited is a free log subscription operation binding the contract event 0x1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f.
//
// Solidity: event StakeDeposited(_depositer address, _amount uint256, _weeksStaked uint256, _khSec uint256, _id uint256)
func (_Test *TestFilterer) WatchStakeDeposited(opts *bind.WatchOpts, sink chan<- *TestStakeDeposited) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "StakeDeposited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestStakeDeposited)
				if err := _Test.contract.UnpackLog(event, "StakeDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
