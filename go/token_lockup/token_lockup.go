// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TokenLockup

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// TokenLockupABI is the input ABI used to generate the binding from.
const TokenLockupABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"ethRewarded\",\"type\":\"uint256\"},{\"name\":\"rtcRewarded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rtcHotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINSTAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtHotWallet\",\"type\":\"address\"}],\"name\":\"setRtHotWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtcAddress\",\"type\":\"address\"}],\"name\":\"setRtI\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rtcToStake\",\"type\":\"uint256\"},{\"name\":\"_durationInWeeksToStake\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signUpFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakers\",\"type\":\"address[]\"},{\"name\":\"_rtcPerStaker\",\"type\":\"uint256\"}],\"name\":\"routeRtcRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kiloHashSecondPerRtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getRewardStruct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rtI\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"rtcStaked\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"khSec\",\"type\":\"uint256\"},{\"name\":\"depositDate\",\"type\":\"uint256\"},{\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakerStruct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULTLOCKUPTIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakers\",\"type\":\"address[]\"},{\"name\":\"_ethPerPerson\",\"type\":\"uint256\"}],\"name\":\"routeEthReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_depositer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_weeksStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_khSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RtcReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EthReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"}],\"name\":\"NewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EthUsdPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SignUpFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_adminSet\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_ownershipTransferred\",\"type\":\"bool\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// TokenLockupBin is the compiled bytecode used for deploying new contracts.
const TokenLockupBin = `606060409081526756bc75e2d6310000600b55600d805461010060a860020a031916740994f9595d28429584bfb5fcbfea75b9c9ea2c240017905560008054600160a060020a0319908116600160a060020a033316908117835560018054909216179055906200013390805190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525060806040519081016040908152604f82527f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6360208301527f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d55908201527f5344292e302e70726963655f7573640000000000000000000000000000000000606082015264010000000062001c9e6200015382021704565b6000908152600e60205260409020805460ff1916600117905550620009f1565b6003546000908190600160a060020a031615806200019357506003546200019190600160a060020a031664010000000062001ff36200053282021704565b155b15620001b557620001b3600064010000000062001ff76200053682021704565b505b600354600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200020e57600080fd5b5af115156200021c57600080fd5b5050506040518051600454600160a060020a039081169116149050620002cd57600354600160a060020a03166338cc48316040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200029557600080fd5b5af11515620002a357600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003495780820151838201526020016200032f565b50505050905090810190601f168015620003775780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156200039657600080fd5b5af11515620003a457600080fd5b5050506040518051915050670de0b6b3a764000062030d403a0201811115620003d157600091506200052b565b600454600160a060020a031663adf59f9982600087876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156200045b57808201518382015260200162000441565b50505050905090810190601f168015620004895780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015620004c1578082015183820152602001620004a7565b50505050905090810190601f168015620004ef5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15156200051057600080fd5b5af115156200051e57600080fd5b5050505060405180519250505b5092915050565b3b90565b600062000550640100000000620024fc6200055682021704565b92915050565b60008062000586731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed64010000000062001ff36200053282021704565b1115620006085760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed179055620005ff60408051908101604052600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152640100000000620028206200093682021704565b50600162000933565b60006200063773c03a2615d5efaf5f49f60b7bb6583eaec212fdf164010000000062001ff36200053282021704565b1115620006b05760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf1179055620005ff60408051908101604052600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152640100000000620028206200093682021704565b6000620006df73b7a07bcf2ba2f2703b24c0691b5278999c59ac7e64010000000062001ff36200053282021704565b1115620007585760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e179055620005ff60408051908101604052600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152640100000000620028206200093682021704565b60006200078773146500cfd35b22e4a392fe0adc06de1a1368ed4864010000000062001ff36200053282021704565b1115620008005760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed48179055620005ff60408051908101604052600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152640100000000620028206200093682021704565b60006200082f736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47564010000000062001ff36200053282021704565b111562000865575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475179055600162000933565b6000620008947320e12a1f859b3feae5fb2a0a32c18f5a65555bbf64010000000062001ff36200053282021704565b1115620008ca575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf179055600162000933565b6000620008f97351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa64010000000062001ff36200053282021704565b11156200092f575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa179055600162000933565b5060005b90565b60058180516200094b9291602001906200094f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200099257805160ff1916838001178555620009c2565b82800160010185558215620009c2579182015b82811115620009c2578251825591602001919060010190620009a5565b50620009d0929150620009d4565b5090565b6200093391905b80821115620009d05760008155600101620009db565b61298f8062000a016000396000f3006060604052600436106101665763ffffffff60e060020a600035041663054f7d9c81146101685780630700037d1461018f5780630bc0eadd146101c657806314d0f1ba146101f55780631d0a0e8d1461021457806325d5971f1461023957806327dc297e1461024f5780633467e9e1146102a557806338bbfa50146102c45780633acaa0d71461035c5780636b41f4111461036f578063704b6c021461038e57806379867480146103ad5780637ec59eef146103cc5780638da5cb5b146103e55780639278b587146103f85780639342cd021461040b578063ac48bd5a1461045c578063acd98bbf1461046f578063b62682b614610482578063be72ab59146104a1578063c8b6cbf7146104b4578063cf30901214610527578063de20e7e91461053a578063df9ec0f414610595578063dff69787146105a8578063f2fde38b146105bb578063f6c2699f146105da578063f851a44014610620578063ffa1ad7414610633575b005b341561017357600080fd5b61017b6106bd565b604051901515815260200160405180910390f35b341561019a57600080fd5b6101ae600160a060020a03600435166106de565b60405191825260208201526040908101905180910390f35b34156101d157600080fd5b6101d96106f7565b604051600160a060020a03909116815260200160405180910390f35b341561020057600080fd5b61017b600160a060020a0360043516610706565b341561021f57600080fd5b61022761071b565b60405190815260200160405180910390f35b341561024457600080fd5b61017b600435610728565b341561025a57600080fd5b610166600480359060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109b395505050505050565b34156102b057600080fd5b610227600160a060020a0360043516610ae2565b34156102cf57600080fd5b610166600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610add95505050505050565b341561036757600080fd5b61017b610af4565b341561037a57600080fd5b61017b600160a060020a0360043516610cc2565b341561039957600080fd5b61017b600160a060020a0360043516610d1e565b34156103b857600080fd5b61017b600160a060020a0360043516610da3565b34156103d757600080fd5b61017b600435602435610e11565b34156103f057600080fd5b6101d96110c1565b341561040357600080fd5b6102276110d1565b341561041657600080fd5b61017b600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506110d792505050565b341561046757600080fd5b6102276112a7565b341561047a57600080fd5b6102276112ad565b341561048d57600080fd5b6101ae600160a060020a03600435166112b3565b34156104ac57600080fd5b6101d96112d6565b34156104bf57600080fd5b6104d6600160a060020a03600435166024356112ea565b604051600160a060020a03909816885260208801969096526040808801959095526060870193909352608086019190915260a085015260c084015290151560e0830152610100909101905180910390f35b341561053257600080fd5b61017b611358565b341561054557600080fd5b61055c600160a060020a0360043516602435611361565b60405195865260208601949094526040808601939093526060850191909152608084015290151560a083015260c0909101905180910390f35b34156105a057600080fd5b610227611511565b34156105b357600080fd5b610227611518565b34156105c657600080fd5b61017b600160a060020a036004351661151e565b61017b600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506115aa92505050565b341561062b57600080fd5b6101d961170f565b341561063e57600080fd5b61064661171e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561068257808201518382015260200161066a565b50505050905090810190601f1680156106af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60015474010000000000000000000000000000000000000000900460ff1681565b6010602052600090815260409020805460019091015482565b600954600160a060020a031681565b60026020526000908152604090205460ff1681565b68056bc75e2d6310000081565b6000803383600f600083600160a060020a0316600160a060020a031681526020019081526020016000208181548110151561075f57fe5b9060005260206000209060080201600501544211151561077e57600080fd5b33600160a060020a0381166000908152600f602052604090208054879190829081106107a657fe5b600091825260209091206007600890920201015460ff1615156107c857600080fd5b600160a060020a0333166000908152600f602052604081208054899081106107ec57fe5b90600052602060002090600802016002015411151561080757fe5b600160a060020a0333166000908152600f6020526040902080548890811061082b57fe5b90600052602060002090600802016002015494506000600f600033600160a060020a0316600160a060020a031681526020019081526020016000208881548110151561087357fe5b6000918252602080832060026008909302019190910192909255600160a060020a0333168152600f909152604081208054899081106108ae57fe5b60009182526020909120600890910201600701805460ff19169115159190911790557f7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf73386896040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a1600d546101009004600160a060020a031663a9059cbb338760405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561098457600080fd5b5af1151561099157600080fd5b5050506040518051905015156109a657600080fd5b5060019695505050505050565b600d805460ff1916600117905560006109ca611755565b600160a060020a031633600160a060020a03161415156109e957600080fd5b6000838152600e602052604090205460ff161515610a0657600080fd5b610a0f826118ce565b6008819055670de0b6b3a76400009150610a3090829063ffffffff6118e116565b600a818155610a45919063ffffffff6118f816565b600a556008547fb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f9060405190815260200160405180910390a17f72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204600a5460405190815260200160405180910390a16000838152600e60205260409020805460ff19908116909155600d80549091169055610add611926565b505050565b60116020526000908152604090205481565b60008054819033600160a060020a0390811691161480610b22575060015433600160a060020a039081169116145b1515610b2d57600080fd5b610b52604080519081016040526003815260ea60020a62155493026020820152611ab7565b600160a060020a033016311015610b6857600080fd5b7f096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d346040516020808252602f908201527f4f7261636c697a65207175657279207761732073656e742c207374616e64696e6040808301919091527f6720627920666f7220616e73776572000000000000000000000000000000000060608301526080909101905180910390a1610c9d60408051908101604052806003815260200160ea60020a6215549302815250608060405190810160405280604f81526020017f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6381526020017f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d5581526020017f5344292e302e70726963655f7573640000000000000000000000000000000000815250611c9e565b6000818152600e60205260409020805460ff19166001908117909155925090505b5090565b6000805433600160a060020a0390811691161480610cee575060015433600160a060020a039081169116145b1515610cf957600080fd5b5060098054600160a060020a038316600160a060020a03199091161790556001919050565b6000805433600160a060020a03908116911614610d3a57600080fd5b600154600160a060020a0383811691161415610d5557600080fd5b60018054600160a060020a031916600160a060020a03841690811782557fe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e960405160405180910390a3919050565b6000805433600160a060020a0390811691161480610dcf575060015433600160a060020a039081169116145b1515610dda57600080fd5b50600d8054600160a060020a0383166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556001919050565b600d546000908190819060ff1615610e2857600080fd5b68056bc75e2d631000008510158015610e42575060048410155b1515610e4d57600080fd5b600160a060020a0333166000908152601160205260409020549150610e7982600163ffffffff611fe116565b600160a060020a033316600090815260116020526040902055600b54610ea690869063ffffffff6118f816565b9050610ec081670de0b6b3a764000063ffffffff6118e116565b600160a060020a0333166000908152600f6020526040902080549192509060018101610eec8382612837565b916000526020600020906008020160006101006040519081016040908152600160a060020a0333168252602082018a9052810189905260608101859052426080820181905262093a8089020160a082015260c08101869052600160e082015291905081518154600160a060020a031916600160a060020a03919091161781556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151600791909101805460ff1916911515919091179055507f1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f90503386868486604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1600d54600954600160a060020a036101009092048216916323b872dd913391168860405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561109457600080fd5b5af115156110a157600080fd5b5050506040518051905015156110b657600080fd5b506001949350505050565b600054600160a060020a03165b90565b600a5481565b60008054819033600160a060020a0390811691161480611105575060015433600160a060020a039081169116145b151561111057600080fd5b5060005b835181101561129b57611164836010600087858151811061113157fe5b90602001906020020151600160a060020a031681526020810191909152604001600020600101549063ffffffff611fe116565b6010600086848151811061117457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020600101557fe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e288482815181106111c857fe5b9060200190602002015184604051600160a060020a03909216825260208201526040908101905180910390a1600d546101009004600160a060020a03166323b872dd3386848151811061121757fe5b906020019060200201518660405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561127157600080fd5b5af1151561127e57600080fd5b50505060405180519050151561129357600080fd5b600101611114565b600191505b5092915050565b60085481565b600b5481565b600160a060020a0316600090815260106020526040902080546001909101549091565b600d546101009004600160a060020a031681565b600f6020528160005260406000208181548110151561130557fe5b600091825260209091206008909102018054600182015460028301546003840154600485015460058601546006870154600790970154600160a060020a0390961698509396509194909391929160ff1688565b600d5460ff1681565b600160a060020a0382166000908152600f60205260408120805482918291829182918291908890811061139057fe5b906000526020600020906008020160010154600f60008a600160a060020a0316600160a060020a03168152602001908152602001600020888154811015156113d457fe5b906000526020600020906008020160030154600f60008b600160a060020a0316600160a060020a031681526020019081526020016000208981548110151561141857fe5b906000526020600020906008020160040154600f60008c600160a060020a0316600160a060020a031681526020019081526020016000208a81548110151561145c57fe5b906000526020600020906008020160050154600f60008d600160a060020a0316600160a060020a031681526020019081526020016000208b8154811015156114a057fe5b906000526020600020906008020160060154600f60008e600160a060020a0316600160a060020a031681526020019081526020016000208c8154811015156114e457fe5b6000918252602090912060089091020160070154949d939c50919a509850965060ff909116945092505050565b6224ea0081565b600c5481565b6000805433600160a060020a0390811691161461153a57600080fd5b600054600160a060020a038381169116141561155557600080fd5b60008054600160a060020a031916600160a060020a0384811691821790925560019133167f7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa5860405160405180910390a4919050565b60008054819033600160a060020a03908116911614806115d8575060015433600160a060020a039081169116145b15156115e357600080fd5b5060005b835181101561129b57611634836010600087858151811061160457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff611fe116565b6010600086848151811061164457fe5b90602001906020020151600160a060020a031681526020810191909152604001600020557f196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a7984828151811061169557fe5b9060200190602002015184604051600160a060020a03909216825260208201526040908101905180910390a18381815181106116cd57fe5b90602001906020020151600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561170757600080fd5b6001016115e7565b600154600160a060020a031690565b60408051908101604052600981527f302e302e31626574610000000000000000000000000000000000000000000000602082015281565b600354600090600160a060020a03161580611782575060035461178090600160a060020a0316611ff3565b155b15611793576117916000611ff7565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156117d257600080fd5b5af115156117df57600080fd5b5050506040518051600454600160a060020a03908116911614905061187457600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561183d57600080fd5b5af1151561184a57600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663c281d19e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118b357600080fd5b5af115156118c057600080fd5b505050604051805191505090565b60006118db826000612001565b92915050565b60008082848115156118ef57fe5b04949350505050565b6000828202831580611914575082848281151561191157fe5b04145b151561191f57600080fd5b9392505050565b600061194d604080519081016040526003815260ea60020a62155493026020820152611ab7565b600160a060020a03301631101561196357600080fd5b7f096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d3460405160208082526035908201527f4f7261636c697a65207175657279207761732073656e742c207374616e64696e6040808301919091527f6720627920666f722074686520616e737765722e2e000000000000000000000060608301526080909101905180910390a1611a9b61025860408051908101604052806003815260200160ea60020a6215549302815250608060405190810160405280604f81526020017f6a736f6e2868747470733a2f2f6170692e636f696e6d61726b65746361702e6381526020017f6f6d2f76312f7469636b65722f657468657265756d2f3f636f6e766572743d5581526020017f5344292e302e70726963655f75736400000000000000000000000000000000008152506121b7565b6000908152600e60205260409020805460ff1916600117905550565b600354600090600160a060020a03161580611ae45750600354611ae290600160a060020a0316611ff3565b155b15611af557611af36000611ff7565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b3457600080fd5b5af11515611b4157600080fd5b5050506040518051600454600160a060020a039081169116149050611bd657600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b9f57600080fd5b5af11515611bac57600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c37578082015183820152602001611c1f565b50505050905090810190601f168015611c645780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611c8257600080fd5b5af11515611c8f57600080fd5b50505060405180519392505050565b6003546000908190600160a060020a03161580611ccd5750600354611ccb90600160a060020a0316611ff3565b155b15611cde57611cdc6000611ff7565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d1d57600080fd5b5af11515611d2a57600080fd5b5050506040518051600454600160a060020a039081169116149050611dbf57600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d8857600080fd5b5af11515611d9557600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e20578082015183820152602001611e08565b50505050905090810190601f168015611e4d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611e6b57600080fd5b5af11515611e7857600080fd5b5050506040518051915050670de0b6b3a764000062030d403a0201811115611ea357600091506112a0565b600454600160a060020a031663adf59f9982600087876040518563ffffffff1660e060020a028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f12578082015183820152602001611efa565b50505050905090810190601f168015611f3f5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611f75578082015183820152602001611f5d565b50505050905090810190601f168015611fa25780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b1515611fc257600080fd5b5af11515611fcf57600080fd5b50505050604051805195945050505050565b60008282018381101561191f57600080fd5b3b90565b60006118db6124fc565b600061200b612863565b5082600080805b835181101561219a577f300000000000000000000000000000000000000000000000000000000000000084828151811061204857fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156120e957507f39000000000000000000000000000000000000000000000000000000000000008482815181106120b257fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1561213f578115612108578515156121005761219a565b600019909501945b600a83029250603084828151811061211c57fe5b016020015160f860020a900460f860020a0260f860020a90040383019250612192565b83818151811061214b57fe5b016020015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916602e60f860020a02141561219257600191505b600101612012565b60008611156121ac5785600a0a830292505b509095945050505050565b6003546000908190600160a060020a031615806121e657506003546121e490600160a060020a0316611ff3565b155b156121f7576121f56000611ff7565b505b600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561223657600080fd5b5af1151561224357600080fd5b5050506040518051600454600160a060020a0390811691161490506122d857600354600160a060020a03166338cc48316040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156122a157600080fd5b5af115156122ae57600080fd5b505050604051805160048054600160a060020a031916600160a060020a0392909216919091179055505b600454600160a060020a031663524f3889856040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612339578082015183820152602001612321565b50505050905090810190601f1680156123665780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561238457600080fd5b5af1151561239157600080fd5b5050506040518051915050670de0b6b3a764000062030d403a02018111156123bc57600091506124f4565b600454600160a060020a031663adf59f99828787876040518563ffffffff1660e060020a028152600401808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561242a578082015183820152602001612412565b50505050905090810190601f1680156124575780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561248d578082015183820152602001612475565b50505050905090810190601f1680156124ba5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b15156124da57600080fd5b5af115156124e757600080fd5b5050505060405180519250505b509392505050565b60008061251c731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611ff3565b111561258c5760038054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905561258460408051908101604052600b81527f6574685f6d61696e6e65740000000000000000000000000000000000000000006020820152612820565b5060016110ce565b60006125ab73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611ff3565b11156126135760038054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905561258460408051908101604052600c81527f6574685f726f707374656e3300000000000000000000000000000000000000006020820152612820565b600061263273b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611ff3565b111561269a5760038054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905561258460408051908101604052600981527f6574685f6b6f76616e00000000000000000000000000000000000000000000006020820152612820565b60006126b973146500cfd35b22e4a392fe0adc06de1a1368ed48611ff3565b11156127215760038054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905561258460408051908101604052600b81527f6574685f72696e6b6562790000000000000000000000000000000000000000006020820152612820565b6000612740736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611ff3565b1115612774575060038054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905560016110ce565b60006127937320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611ff3565b11156127c7575060038054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf17905560016110ce565b60006127e67351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611ff3565b111561281a575060038054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa17905560016110ce565b50600090565b6005818051612833929160200190612875565b5050565b815481835581811511610add57600802816008028360005260206000209182019101610add91906128ef565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128b657805160ff19168380011785556128e3565b828001600101855582156128e3579182015b828111156128e35782518255916020019190600101906128c8565b50610cbe929150612949565b6110ce91905b80821115610cbe578054600160a060020a031916815560006001820181905560028201819055600382018190556004820181905560058201819055600682015560078101805460ff191690556008016128f5565b6110ce91905b80821115610cbe576000815560010161294f5600a165627a7a723058208484a4f61d6274afa238236ba4fc2ce005edc6e059767659735eb4a9465c95f80029`

// DeployTokenLockup deploys a new Ethereum contract, binding an instance of TokenLockup to it.
func DeployTokenLockup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenLockup, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenLockupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenLockupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenLockup{TokenLockupCaller: TokenLockupCaller{contract: contract}, TokenLockupTransactor: TokenLockupTransactor{contract: contract}, TokenLockupFilterer: TokenLockupFilterer{contract: contract}}, nil
}

// TokenLockup is an auto generated Go binding around an Ethereum contract.
type TokenLockup struct {
	TokenLockupCaller     // Read-only binding to the contract
	TokenLockupTransactor // Write-only binding to the contract
	TokenLockupFilterer   // Log filterer for contract events
}

// TokenLockupCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenLockupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenLockupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenLockupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenLockupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenLockupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenLockupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenLockupSession struct {
	Contract     *TokenLockup      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenLockupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenLockupCallerSession struct {
	Contract *TokenLockupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TokenLockupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenLockupTransactorSession struct {
	Contract     *TokenLockupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TokenLockupRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenLockupRaw struct {
	Contract *TokenLockup // Generic contract binding to access the raw methods on
}

// TokenLockupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenLockupCallerRaw struct {
	Contract *TokenLockupCaller // Generic read-only contract binding to access the raw methods on
}

// TokenLockupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenLockupTransactorRaw struct {
	Contract *TokenLockupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenLockup creates a new instance of TokenLockup, bound to a specific deployed contract.
func NewTokenLockup(address common.Address, backend bind.ContractBackend) (*TokenLockup, error) {
	contract, err := bindTokenLockup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenLockup{TokenLockupCaller: TokenLockupCaller{contract: contract}, TokenLockupTransactor: TokenLockupTransactor{contract: contract}, TokenLockupFilterer: TokenLockupFilterer{contract: contract}}, nil
}

// NewTokenLockupCaller creates a new read-only instance of TokenLockup, bound to a specific deployed contract.
func NewTokenLockupCaller(address common.Address, caller bind.ContractCaller) (*TokenLockupCaller, error) {
	contract, err := bindTokenLockup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenLockupCaller{contract: contract}, nil
}

// NewTokenLockupTransactor creates a new write-only instance of TokenLockup, bound to a specific deployed contract.
func NewTokenLockupTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenLockupTransactor, error) {
	contract, err := bindTokenLockup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenLockupTransactor{contract: contract}, nil
}

// NewTokenLockupFilterer creates a new log filterer instance of TokenLockup, bound to a specific deployed contract.
func NewTokenLockupFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenLockupFilterer, error) {
	contract, err := bindTokenLockup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenLockupFilterer{contract: contract}, nil
}

// bindTokenLockup binds a generic wrapper to an already deployed contract.
func bindTokenLockup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenLockupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenLockup *TokenLockupRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenLockup.Contract.TokenLockupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenLockup *TokenLockupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenLockup.Contract.TokenLockupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenLockup *TokenLockupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenLockup.Contract.TokenLockupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenLockup *TokenLockupCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenLockup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenLockup *TokenLockupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenLockup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenLockup *TokenLockupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenLockup.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) DEFAULTLOCKUPTIME(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "DEFAULTLOCKUPTIME")
	return *ret0, err
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) DEFAULTLOCKUPTIME() (*big.Int, error) {
	return _TokenLockup.Contract.DEFAULTLOCKUPTIME(&_TokenLockup.CallOpts)
}

// DEFAULTLOCKUPTIME is a free data retrieval call binding the contract method 0xdf9ec0f4.
//
// Solidity: function DEFAULTLOCKUPTIME() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) DEFAULTLOCKUPTIME() (*big.Int, error) {
	return _TokenLockup.Contract.DEFAULTLOCKUPTIME(&_TokenLockup.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) MINSTAKE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "MINSTAKE")
	return *ret0, err
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) MINSTAKE() (*big.Int, error) {
	return _TokenLockup.Contract.MINSTAKE(&_TokenLockup.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0x1d0a0e8d.
//
// Solidity: function MINSTAKE() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) MINSTAKE() (*big.Int, error) {
	return _TokenLockup.Contract.MINSTAKE(&_TokenLockup.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_TokenLockup *TokenLockupCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "VERSION")
	return *ret0, err
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_TokenLockup *TokenLockupSession) VERSION() (string, error) {
	return _TokenLockup.Contract.VERSION(&_TokenLockup.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() constant returns(string)
func (_TokenLockup *TokenLockupCallerSession) VERSION() (string, error) {
	return _TokenLockup.Contract.VERSION(&_TokenLockup.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_TokenLockup *TokenLockupCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_TokenLockup *TokenLockupSession) Admin() (common.Address, error) {
	return _TokenLockup.Contract.Admin(&_TokenLockup.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_TokenLockup *TokenLockupCallerSession) Admin() (common.Address, error) {
	return _TokenLockup.Contract.Admin(&_TokenLockup.CallOpts)
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) EthUSD(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "ethUSD")
	return *ret0, err
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) EthUSD() (*big.Int, error) {
	return _TokenLockup.Contract.EthUSD(&_TokenLockup.CallOpts)
}

// EthUSD is a free data retrieval call binding the contract method 0xac48bd5a.
//
// Solidity: function ethUSD() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) EthUSD() (*big.Int, error) {
	return _TokenLockup.Contract.EthUSD(&_TokenLockup.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_TokenLockup *TokenLockupCaller) Frozen(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "frozen")
	return *ret0, err
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_TokenLockup *TokenLockupSession) Frozen() (bool, error) {
	return _TokenLockup.Contract.Frozen(&_TokenLockup.CallOpts)
}

// Frozen is a free data retrieval call binding the contract method 0x054f7d9c.
//
// Solidity: function frozen() constant returns(bool)
func (_TokenLockup *TokenLockupCallerSession) Frozen() (bool, error) {
	return _TokenLockup.Contract.Frozen(&_TokenLockup.CallOpts)
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_TokenLockup *TokenLockupCaller) GetRewardStruct(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _TokenLockup.contract.Call(opts, out, "getRewardStruct", _staker)
	return *ret0, *ret1, err
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_TokenLockup *TokenLockupSession) GetRewardStruct(_staker common.Address) (*big.Int, *big.Int, error) {
	return _TokenLockup.Contract.GetRewardStruct(&_TokenLockup.CallOpts, _staker)
}

// GetRewardStruct is a free data retrieval call binding the contract method 0xb62682b6.
//
// Solidity: function getRewardStruct(_staker address) constant returns(uint256, uint256)
func (_TokenLockup *TokenLockupCallerSession) GetRewardStruct(_staker common.Address) (*big.Int, *big.Int, error) {
	return _TokenLockup.Contract.GetRewardStruct(&_TokenLockup.CallOpts, _staker)
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_TokenLockup *TokenLockupCaller) GetStakerStruct(opts *bind.CallOpts, _staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
		ret4 = new(*big.Int)
		ret5 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
	}
	err := _TokenLockup.contract.Call(opts, out, "getStakerStruct", _staker, _id)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, err
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_TokenLockup *TokenLockupSession) GetStakerStruct(_staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	return _TokenLockup.Contract.GetStakerStruct(&_TokenLockup.CallOpts, _staker, _id)
}

// GetStakerStruct is a free data retrieval call binding the contract method 0xde20e7e9.
//
// Solidity: function getStakerStruct(_staker address, _id uint256) constant returns(uint256, uint256, uint256, uint256, uint256, bool)
func (_TokenLockup *TokenLockupCallerSession) GetStakerStruct(_staker common.Address, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, *big.Int, bool, error) {
	return _TokenLockup.Contract.GetStakerStruct(&_TokenLockup.CallOpts, _staker, _id)
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) KiloHashSecondPerRtc(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "kiloHashSecondPerRtc")
	return *ret0, err
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) KiloHashSecondPerRtc() (*big.Int, error) {
	return _TokenLockup.Contract.KiloHashSecondPerRtc(&_TokenLockup.CallOpts)
}

// KiloHashSecondPerRtc is a free data retrieval call binding the contract method 0xacd98bbf.
//
// Solidity: function kiloHashSecondPerRtc() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) KiloHashSecondPerRtc() (*big.Int, error) {
	return _TokenLockup.Contract.KiloHashSecondPerRtc(&_TokenLockup.CallOpts)
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_TokenLockup *TokenLockupCaller) Locked(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "locked")
	return *ret0, err
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_TokenLockup *TokenLockupSession) Locked() (bool, error) {
	return _TokenLockup.Contract.Locked(&_TokenLockup.CallOpts)
}

// Locked is a free data retrieval call binding the contract method 0xcf309012.
//
// Solidity: function locked() constant returns(bool)
func (_TokenLockup *TokenLockupCallerSession) Locked() (bool, error) {
	return _TokenLockup.Contract.Locked(&_TokenLockup.CallOpts)
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_TokenLockup *TokenLockupCaller) Moderators(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "moderators", arg0)
	return *ret0, err
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_TokenLockup *TokenLockupSession) Moderators(arg0 common.Address) (bool, error) {
	return _TokenLockup.Contract.Moderators(&_TokenLockup.CallOpts, arg0)
}

// Moderators is a free data retrieval call binding the contract method 0x14d0f1ba.
//
// Solidity: function moderators( address) constant returns(bool)
func (_TokenLockup *TokenLockupCallerSession) Moderators(arg0 common.Address) (bool, error) {
	return _TokenLockup.Contract.Moderators(&_TokenLockup.CallOpts, arg0)
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) NumStakes(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "numStakes", arg0)
	return *ret0, err
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_TokenLockup *TokenLockupSession) NumStakes(arg0 common.Address) (*big.Int, error) {
	return _TokenLockup.Contract.NumStakes(&_TokenLockup.CallOpts, arg0)
}

// NumStakes is a free data retrieval call binding the contract method 0x3467e9e1.
//
// Solidity: function numStakes( address) constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) NumStakes(arg0 common.Address) (*big.Int, error) {
	return _TokenLockup.Contract.NumStakes(&_TokenLockup.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenLockup *TokenLockupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenLockup *TokenLockupSession) Owner() (common.Address, error) {
	return _TokenLockup.Contract.Owner(&_TokenLockup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TokenLockup *TokenLockupCallerSession) Owner() (common.Address, error) {
	return _TokenLockup.Contract.Owner(&_TokenLockup.CallOpts)
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_TokenLockup *TokenLockupCaller) Rewards(opts *bind.CallOpts, arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	ret := new(struct {
		EthRewarded *big.Int
		RtcRewarded *big.Int
	})
	out := ret
	err := _TokenLockup.contract.Call(opts, out, "rewards", arg0)
	return *ret, err
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_TokenLockup *TokenLockupSession) Rewards(arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	return _TokenLockup.Contract.Rewards(&_TokenLockup.CallOpts, arg0)
}

// Rewards is a free data retrieval call binding the contract method 0x0700037d.
//
// Solidity: function rewards( address) constant returns(ethRewarded uint256, rtcRewarded uint256)
func (_TokenLockup *TokenLockupCallerSession) Rewards(arg0 common.Address) (struct {
	EthRewarded *big.Int
	RtcRewarded *big.Int
}, error) {
	return _TokenLockup.Contract.Rewards(&_TokenLockup.CallOpts, arg0)
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_TokenLockup *TokenLockupCaller) RtI(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "rtI")
	return *ret0, err
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_TokenLockup *TokenLockupSession) RtI() (common.Address, error) {
	return _TokenLockup.Contract.RtI(&_TokenLockup.CallOpts)
}

// RtI is a free data retrieval call binding the contract method 0xbe72ab59.
//
// Solidity: function rtI() constant returns(address)
func (_TokenLockup *TokenLockupCallerSession) RtI() (common.Address, error) {
	return _TokenLockup.Contract.RtI(&_TokenLockup.CallOpts)
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_TokenLockup *TokenLockupCaller) RtcHotWallet(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "rtcHotWallet")
	return *ret0, err
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_TokenLockup *TokenLockupSession) RtcHotWallet() (common.Address, error) {
	return _TokenLockup.Contract.RtcHotWallet(&_TokenLockup.CallOpts)
}

// RtcHotWallet is a free data retrieval call binding the contract method 0x0bc0eadd.
//
// Solidity: function rtcHotWallet() constant returns(address)
func (_TokenLockup *TokenLockupCallerSession) RtcHotWallet() (common.Address, error) {
	return _TokenLockup.Contract.RtcHotWallet(&_TokenLockup.CallOpts)
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) SignUpFee(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "signUpFee")
	return *ret0, err
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) SignUpFee() (*big.Int, error) {
	return _TokenLockup.Contract.SignUpFee(&_TokenLockup.CallOpts)
}

// SignUpFee is a free data retrieval call binding the contract method 0x9278b587.
//
// Solidity: function signUpFee() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) SignUpFee() (*big.Int, error) {
	return _TokenLockup.Contract.SignUpFee(&_TokenLockup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_TokenLockup *TokenLockupCaller) StakerCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TokenLockup.contract.Call(opts, out, "stakerCount")
	return *ret0, err
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_TokenLockup *TokenLockupSession) StakerCount() (*big.Int, error) {
	return _TokenLockup.Contract.StakerCount(&_TokenLockup.CallOpts)
}

// StakerCount is a free data retrieval call binding the contract method 0xdff69787.
//
// Solidity: function stakerCount() constant returns(uint256)
func (_TokenLockup *TokenLockupCallerSession) StakerCount() (*big.Int, error) {
	return _TokenLockup.Contract.StakerCount(&_TokenLockup.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_TokenLockup *TokenLockupCaller) Stakers(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	ret := new(struct {
		Addr        common.Address
		RtcStaked   *big.Int
		Deposit     *big.Int
		KhSec       *big.Int
		DepositDate *big.Int
		ReleaseDate *big.Int
		Id          *big.Int
		Enabled     bool
	})
	out := ret
	err := _TokenLockup.contract.Call(opts, out, "stakers", arg0, arg1)
	return *ret, err
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_TokenLockup *TokenLockupSession) Stakers(arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	return _TokenLockup.Contract.Stakers(&_TokenLockup.CallOpts, arg0, arg1)
}

// Stakers is a free data retrieval call binding the contract method 0xc8b6cbf7.
//
// Solidity: function stakers( address,  uint256) constant returns(addr address, rtcStaked uint256, deposit uint256, khSec uint256, depositDate uint256, releaseDate uint256, id uint256, enabled bool)
func (_TokenLockup *TokenLockupCallerSession) Stakers(arg0 common.Address, arg1 *big.Int) (struct {
	Addr        common.Address
	RtcStaked   *big.Int
	Deposit     *big.Int
	KhSec       *big.Int
	DepositDate *big.Int
	ReleaseDate *big.Int
	Id          *big.Int
	Enabled     bool
}, error) {
	return _TokenLockup.Contract.Stakers(&_TokenLockup.CallOpts, arg0, arg1)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_TokenLockup *TokenLockupTransactor) Callback(opts *bind.TransactOpts, myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "__callback", myid, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_TokenLockup *TokenLockupSession) Callback(myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _TokenLockup.Contract.Callback(&_TokenLockup.TransactOpts, myid, result, proof)
}

// Callback is a paid mutator transaction binding the contract method 0x38bbfa50.
//
// Solidity: function __callback(myid bytes32, result string, proof bytes) returns()
func (_TokenLockup *TokenLockupTransactorSession) Callback(myid [32]byte, result string, proof []byte) (*types.Transaction, error) {
	return _TokenLockup.Contract.Callback(&_TokenLockup.TransactOpts, myid, result, proof)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactor) DepositStake(opts *bind.TransactOpts, _rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "depositStake", _rtcToStake, _durationInWeeksToStake)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_TokenLockup *TokenLockupSession) DepositStake(_rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.DepositStake(&_TokenLockup.TransactOpts, _rtcToStake, _durationInWeeksToStake)
}

// DepositStake is a paid mutator transaction binding the contract method 0x7ec59eef.
//
// Solidity: function depositStake(_rtcToStake uint256, _durationInWeeksToStake uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) DepositStake(_rtcToStake *big.Int, _durationInWeeksToStake *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.DepositStake(&_TokenLockup.TransactOpts, _rtcToStake, _durationInWeeksToStake)
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_TokenLockup *TokenLockupTransactor) ForceUpdate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "forceUpdate")
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_TokenLockup *TokenLockupSession) ForceUpdate() (*types.Transaction, error) {
	return _TokenLockup.Contract.ForceUpdate(&_TokenLockup.TransactOpts)
}

// ForceUpdate is a paid mutator transaction binding the contract method 0x3acaa0d7.
//
// Solidity: function forceUpdate() returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) ForceUpdate() (*types.Transaction, error) {
	return _TokenLockup.Contract.ForceUpdate(&_TokenLockup.TransactOpts)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactor) RouteEthReward(opts *bind.TransactOpts, _stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "routeEthReward", _stakers, _ethPerPerson)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_TokenLockup *TokenLockupSession) RouteEthReward(_stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.RouteEthReward(&_TokenLockup.TransactOpts, _stakers, _ethPerPerson)
}

// RouteEthReward is a paid mutator transaction binding the contract method 0xf6c2699f.
//
// Solidity: function routeEthReward(_stakers address[], _ethPerPerson uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) RouteEthReward(_stakers []common.Address, _ethPerPerson *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.RouteEthReward(&_TokenLockup.TransactOpts, _stakers, _ethPerPerson)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactor) RouteRtcRewards(opts *bind.TransactOpts, _stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "routeRtcRewards", _stakers, _rtcPerStaker)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_TokenLockup *TokenLockupSession) RouteRtcRewards(_stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.RouteRtcRewards(&_TokenLockup.TransactOpts, _stakers, _rtcPerStaker)
}

// RouteRtcRewards is a paid mutator transaction binding the contract method 0x9342cd02.
//
// Solidity: function routeRtcRewards(_stakers address[], _rtcPerStaker uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) RouteRtcRewards(_stakers []common.Address, _rtcPerStaker *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.RouteRtcRewards(&_TokenLockup.TransactOpts, _stakers, _rtcPerStaker)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_TokenLockup *TokenLockupTransactor) SetAdmin(opts *bind.TransactOpts, _newAdmin common.Address) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "setAdmin", _newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_TokenLockup *TokenLockupSession) SetAdmin(_newAdmin common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetAdmin(&_TokenLockup.TransactOpts, _newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(_newAdmin address) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) SetAdmin(_newAdmin common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetAdmin(&_TokenLockup.TransactOpts, _newAdmin)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_TokenLockup *TokenLockupTransactor) SetRtHotWallet(opts *bind.TransactOpts, _rtHotWallet common.Address) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "setRtHotWallet", _rtHotWallet)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_TokenLockup *TokenLockupSession) SetRtHotWallet(_rtHotWallet common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetRtHotWallet(&_TokenLockup.TransactOpts, _rtHotWallet)
}

// SetRtHotWallet is a paid mutator transaction binding the contract method 0x6b41f411.
//
// Solidity: function setRtHotWallet(_rtHotWallet address) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) SetRtHotWallet(_rtHotWallet common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetRtHotWallet(&_TokenLockup.TransactOpts, _rtHotWallet)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_TokenLockup *TokenLockupTransactor) SetRtI(opts *bind.TransactOpts, _rtcAddress common.Address) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "setRtI", _rtcAddress)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_TokenLockup *TokenLockupSession) SetRtI(_rtcAddress common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetRtI(&_TokenLockup.TransactOpts, _rtcAddress)
}

// SetRtI is a paid mutator transaction binding the contract method 0x79867480.
//
// Solidity: function setRtI(_rtcAddress address) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) SetRtI(_rtcAddress common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.SetRtI(&_TokenLockup.TransactOpts, _rtcAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_TokenLockup *TokenLockupTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_TokenLockup *TokenLockupSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.TransferOwnership(&_TokenLockup.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _TokenLockup.Contract.TransferOwnership(&_TokenLockup.TransactOpts, _newOwner)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactor) WithdrawStake(opts *bind.TransactOpts, _stakeId *big.Int) (*types.Transaction, error) {
	return _TokenLockup.contract.Transact(opts, "withdrawStake", _stakeId)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_TokenLockup *TokenLockupSession) WithdrawStake(_stakeId *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.WithdrawStake(&_TokenLockup.TransactOpts, _stakeId)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0x25d5971f.
//
// Solidity: function withdrawStake(_stakeId uint256) returns(bool)
func (_TokenLockup *TokenLockupTransactorSession) WithdrawStake(_stakeId *big.Int) (*types.Transaction, error) {
	return _TokenLockup.Contract.WithdrawStake(&_TokenLockup.TransactOpts, _stakeId)
}

// TokenLockupAdminSetIterator is returned from FilterAdminSet and is used to iterate over the raw logs and unpacked data for AdminSet events raised by the TokenLockup contract.
type TokenLockupAdminSetIterator struct {
	Event *TokenLockupAdminSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupAdminSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupAdminSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupAdminSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupAdminSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupAdminSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupAdminSet represents a AdminSet event raised by the TokenLockup contract.
type TokenLockupAdminSet struct {
	Admin    common.Address
	AdminSet bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAdminSet is a free log retrieval operation binding the contract event 0xe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e9.
//
// Solidity: event AdminSet(_admin indexed address, _adminSet indexed bool)
func (_TokenLockup *TokenLockupFilterer) FilterAdminSet(opts *bind.FilterOpts, _admin []common.Address, _adminSet []bool) (*TokenLockupAdminSetIterator, error) {

	var _adminRule []interface{}
	for _, _adminItem := range _admin {
		_adminRule = append(_adminRule, _adminItem)
	}
	var _adminSetRule []interface{}
	for _, _adminSetItem := range _adminSet {
		_adminSetRule = append(_adminSetRule, _adminSetItem)
	}

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "AdminSet", _adminRule, _adminSetRule)
	if err != nil {
		return nil, err
	}
	return &TokenLockupAdminSetIterator{contract: _TokenLockup.contract, event: "AdminSet", logs: logs, sub: sub}, nil
}

// WatchAdminSet is a free log subscription operation binding the contract event 0xe68d2c359a771606c400cf8b87000cf5864010363d6a736e98f5047b7bbe18e9.
//
// Solidity: event AdminSet(_admin indexed address, _adminSet indexed bool)
func (_TokenLockup *TokenLockupFilterer) WatchAdminSet(opts *bind.WatchOpts, sink chan<- *TokenLockupAdminSet, _admin []common.Address, _adminSet []bool) (event.Subscription, error) {

	var _adminRule []interface{}
	for _, _adminItem := range _admin {
		_adminRule = append(_adminRule, _adminItem)
	}
	var _adminSetRule []interface{}
	for _, _adminSetItem := range _adminSet {
		_adminSetRule = append(_adminSetRule, _adminSetItem)
	}

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "AdminSet", _adminRule, _adminSetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupAdminSet)
				if err := _TokenLockup.contract.UnpackLog(event, "AdminSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupDepositWithdrawnIterator is returned from FilterDepositWithdrawn and is used to iterate over the raw logs and unpacked data for DepositWithdrawn events raised by the TokenLockup contract.
type TokenLockupDepositWithdrawnIterator struct {
	Event *TokenLockupDepositWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupDepositWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupDepositWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupDepositWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupDepositWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupDepositWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupDepositWithdrawn represents a DepositWithdrawn event raised by the TokenLockup contract.
type TokenLockupDepositWithdrawn struct {
	Staker  common.Address
	Amount  *big.Int
	StakeId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositWithdrawn is a free log retrieval operation binding the contract event 0x7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf7.
//
// Solidity: event DepositWithdrawn(_staker address, _amount uint256, _stakeId uint256)
func (_TokenLockup *TokenLockupFilterer) FilterDepositWithdrawn(opts *bind.FilterOpts) (*TokenLockupDepositWithdrawnIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "DepositWithdrawn")
	if err != nil {
		return nil, err
	}
	return &TokenLockupDepositWithdrawnIterator{contract: _TokenLockup.contract, event: "DepositWithdrawn", logs: logs, sub: sub}, nil
}

// WatchDepositWithdrawn is a free log subscription operation binding the contract event 0x7719804546c0185709e60c90d164447ff251a5ba29af0216faa921350f6bebf7.
//
// Solidity: event DepositWithdrawn(_staker address, _amount uint256, _stakeId uint256)
func (_TokenLockup *TokenLockupFilterer) WatchDepositWithdrawn(opts *bind.WatchOpts, sink chan<- *TokenLockupDepositWithdrawn) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "DepositWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupDepositWithdrawn)
				if err := _TokenLockup.contract.UnpackLog(event, "DepositWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupEthRewardIterator is returned from FilterEthReward and is used to iterate over the raw logs and unpacked data for EthReward events raised by the TokenLockup contract.
type TokenLockupEthRewardIterator struct {
	Event *TokenLockupEthReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupEthRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupEthReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupEthReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupEthRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupEthRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupEthReward represents a EthReward event raised by the TokenLockup contract.
type TokenLockupEthReward struct {
	Staker common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEthReward is a free log retrieval operation binding the contract event 0x196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a79.
//
// Solidity: event EthReward(_staker address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) FilterEthReward(opts *bind.FilterOpts) (*TokenLockupEthRewardIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "EthReward")
	if err != nil {
		return nil, err
	}
	return &TokenLockupEthRewardIterator{contract: _TokenLockup.contract, event: "EthReward", logs: logs, sub: sub}, nil
}

// WatchEthReward is a free log subscription operation binding the contract event 0x196f95be2bd8e6aa49ac118195dec22c01e6adf2c34eaae9fefbb9efc8b78a79.
//
// Solidity: event EthReward(_staker address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) WatchEthReward(opts *bind.WatchOpts, sink chan<- *TokenLockupEthReward) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "EthReward")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupEthReward)
				if err := _TokenLockup.contract.UnpackLog(event, "EthReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupEthUsdPriceUpdatedIterator is returned from FilterEthUsdPriceUpdated and is used to iterate over the raw logs and unpacked data for EthUsdPriceUpdated events raised by the TokenLockup contract.
type TokenLockupEthUsdPriceUpdatedIterator struct {
	Event *TokenLockupEthUsdPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupEthUsdPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupEthUsdPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupEthUsdPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupEthUsdPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupEthUsdPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupEthUsdPriceUpdated represents a EthUsdPriceUpdated event raised by the TokenLockup contract.
type TokenLockupEthUsdPriceUpdated struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEthUsdPriceUpdated is a free log retrieval operation binding the contract event 0xb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f.
//
// Solidity: event EthUsdPriceUpdated(price uint256)
func (_TokenLockup *TokenLockupFilterer) FilterEthUsdPriceUpdated(opts *bind.FilterOpts) (*TokenLockupEthUsdPriceUpdatedIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "EthUsdPriceUpdated")
	if err != nil {
		return nil, err
	}
	return &TokenLockupEthUsdPriceUpdatedIterator{contract: _TokenLockup.contract, event: "EthUsdPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchEthUsdPriceUpdated is a free log subscription operation binding the contract event 0xb8a7d16d8966ae3f48e95e49ed078690c23bd91afb16363bbaaaac00ff99b03f.
//
// Solidity: event EthUsdPriceUpdated(price uint256)
func (_TokenLockup *TokenLockupFilterer) WatchEthUsdPriceUpdated(opts *bind.WatchOpts, sink chan<- *TokenLockupEthUsdPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "EthUsdPriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupEthUsdPriceUpdated)
				if err := _TokenLockup.contract.UnpackLog(event, "EthUsdPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupEthWithdrawnIterator is returned from FilterEthWithdrawn and is used to iterate over the raw logs and unpacked data for EthWithdrawn events raised by the TokenLockup contract.
type TokenLockupEthWithdrawnIterator struct {
	Event *TokenLockupEthWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupEthWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupEthWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupEthWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupEthWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupEthWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupEthWithdrawn represents a EthWithdrawn event raised by the TokenLockup contract.
type TokenLockupEthWithdrawn struct {
	Withdrawer common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEthWithdrawn is a free log retrieval operation binding the contract event 0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b.
//
// Solidity: event EthWithdrawn(_withdrawer address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) FilterEthWithdrawn(opts *bind.FilterOpts) (*TokenLockupEthWithdrawnIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "EthWithdrawn")
	if err != nil {
		return nil, err
	}
	return &TokenLockupEthWithdrawnIterator{contract: _TokenLockup.contract, event: "EthWithdrawn", logs: logs, sub: sub}, nil
}

// WatchEthWithdrawn is a free log subscription operation binding the contract event 0x8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b.
//
// Solidity: event EthWithdrawn(_withdrawer address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) WatchEthWithdrawn(opts *bind.WatchOpts, sink chan<- *TokenLockupEthWithdrawn) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "EthWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupEthWithdrawn)
				if err := _TokenLockup.contract.UnpackLog(event, "EthWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupNewOraclizeQueryIterator is returned from FilterNewOraclizeQuery and is used to iterate over the raw logs and unpacked data for NewOraclizeQuery events raised by the TokenLockup contract.
type TokenLockupNewOraclizeQueryIterator struct {
	Event *TokenLockupNewOraclizeQuery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupNewOraclizeQueryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupNewOraclizeQuery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupNewOraclizeQuery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupNewOraclizeQueryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupNewOraclizeQueryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupNewOraclizeQuery represents a NewOraclizeQuery event raised by the TokenLockup contract.
type TokenLockupNewOraclizeQuery struct {
	Result string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewOraclizeQuery is a free log retrieval operation binding the contract event 0x096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d34.
//
// Solidity: event NewOraclizeQuery(result string)
func (_TokenLockup *TokenLockupFilterer) FilterNewOraclizeQuery(opts *bind.FilterOpts) (*TokenLockupNewOraclizeQueryIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "NewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return &TokenLockupNewOraclizeQueryIterator{contract: _TokenLockup.contract, event: "NewOraclizeQuery", logs: logs, sub: sub}, nil
}

// WatchNewOraclizeQuery is a free log subscription operation binding the contract event 0x096835e36c2ccea88ff2b3aca87dfc938b977e52ea656873ff76a8dba50d4d34.
//
// Solidity: event NewOraclizeQuery(result string)
func (_TokenLockup *TokenLockupFilterer) WatchNewOraclizeQuery(opts *bind.WatchOpts, sink chan<- *TokenLockupNewOraclizeQuery) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "NewOraclizeQuery")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupNewOraclizeQuery)
				if err := _TokenLockup.contract.UnpackLog(event, "NewOraclizeQuery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenLockup contract.
type TokenLockupOwnershipTransferredIterator struct {
	Event *TokenLockupOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupOwnershipTransferred represents a OwnershipTransferred event raised by the TokenLockup contract.
type TokenLockupOwnershipTransferred struct {
	PreviousOwner        common.Address
	NewOwner             common.Address
	OwnershipTransferred bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa58.
//
// Solidity: event OwnershipTransferred(_previousOwner indexed address, _newOwner indexed address, _ownershipTransferred indexed bool)
func (_TokenLockup *TokenLockupFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, _previousOwner []common.Address, _newOwner []common.Address, _ownershipTransferred []bool) (*TokenLockupOwnershipTransferredIterator, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}
	var _ownershipTransferredRule []interface{}
	for _, _ownershipTransferredItem := range _ownershipTransferred {
		_ownershipTransferredRule = append(_ownershipTransferredRule, _ownershipTransferredItem)
	}

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule, _ownershipTransferredRule)
	if err != nil {
		return nil, err
	}
	return &TokenLockupOwnershipTransferredIterator{contract: _TokenLockup.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x7fdc2a4b6eb39ec3363d710d188620bd1e97b3c434161f187b4d0dc0544faa58.
//
// Solidity: event OwnershipTransferred(_previousOwner indexed address, _newOwner indexed address, _ownershipTransferred indexed bool)
func (_TokenLockup *TokenLockupFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenLockupOwnershipTransferred, _previousOwner []common.Address, _newOwner []common.Address, _ownershipTransferred []bool) (event.Subscription, error) {

	var _previousOwnerRule []interface{}
	for _, _previousOwnerItem := range _previousOwner {
		_previousOwnerRule = append(_previousOwnerRule, _previousOwnerItem)
	}
	var _newOwnerRule []interface{}
	for _, _newOwnerItem := range _newOwner {
		_newOwnerRule = append(_newOwnerRule, _newOwnerItem)
	}
	var _ownershipTransferredRule []interface{}
	for _, _ownershipTransferredItem := range _ownershipTransferred {
		_ownershipTransferredRule = append(_ownershipTransferredRule, _ownershipTransferredItem)
	}

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "OwnershipTransferred", _previousOwnerRule, _newOwnerRule, _ownershipTransferredRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupOwnershipTransferred)
				if err := _TokenLockup.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupRtcRewardIterator is returned from FilterRtcReward and is used to iterate over the raw logs and unpacked data for RtcReward events raised by the TokenLockup contract.
type TokenLockupRtcRewardIterator struct {
	Event *TokenLockupRtcReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupRtcRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupRtcReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupRtcReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupRtcRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupRtcRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupRtcReward represents a RtcReward event raised by the TokenLockup contract.
type TokenLockupRtcReward struct {
	Staker common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRtcReward is a free log retrieval operation binding the contract event 0xe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e28.
//
// Solidity: event RtcReward(_staker address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) FilterRtcReward(opts *bind.FilterOpts) (*TokenLockupRtcRewardIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "RtcReward")
	if err != nil {
		return nil, err
	}
	return &TokenLockupRtcRewardIterator{contract: _TokenLockup.contract, event: "RtcReward", logs: logs, sub: sub}, nil
}

// WatchRtcReward is a free log subscription operation binding the contract event 0xe0ba89edeae157ec385468cf95ff7ea61497f95bf3e0fe9637fa358aefdf7e28.
//
// Solidity: event RtcReward(_staker address, _amount uint256)
func (_TokenLockup *TokenLockupFilterer) WatchRtcReward(opts *bind.WatchOpts, sink chan<- *TokenLockupRtcReward) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "RtcReward")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupRtcReward)
				if err := _TokenLockup.contract.UnpackLog(event, "RtcReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupSignUpFeeUpdatedIterator is returned from FilterSignUpFeeUpdated and is used to iterate over the raw logs and unpacked data for SignUpFeeUpdated events raised by the TokenLockup contract.
type TokenLockupSignUpFeeUpdatedIterator struct {
	Event *TokenLockupSignUpFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupSignUpFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupSignUpFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupSignUpFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupSignUpFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupSignUpFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupSignUpFeeUpdated represents a SignUpFeeUpdated event raised by the TokenLockup contract.
type TokenLockupSignUpFeeUpdated struct {
	Fee *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSignUpFeeUpdated is a free log retrieval operation binding the contract event 0x72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204.
//
// Solidity: event SignUpFeeUpdated(fee uint256)
func (_TokenLockup *TokenLockupFilterer) FilterSignUpFeeUpdated(opts *bind.FilterOpts) (*TokenLockupSignUpFeeUpdatedIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "SignUpFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &TokenLockupSignUpFeeUpdatedIterator{contract: _TokenLockup.contract, event: "SignUpFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchSignUpFeeUpdated is a free log subscription operation binding the contract event 0x72cfec5345d9622cfd9fdeadefa51edec8e3d432a8f9fcb12cd65d484b47b204.
//
// Solidity: event SignUpFeeUpdated(fee uint256)
func (_TokenLockup *TokenLockupFilterer) WatchSignUpFeeUpdated(opts *bind.WatchOpts, sink chan<- *TokenLockupSignUpFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "SignUpFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupSignUpFeeUpdated)
				if err := _TokenLockup.contract.UnpackLog(event, "SignUpFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// TokenLockupStakeDepositedIterator is returned from FilterStakeDeposited and is used to iterate over the raw logs and unpacked data for StakeDeposited events raised by the TokenLockup contract.
type TokenLockupStakeDepositedIterator struct {
	Event *TokenLockupStakeDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLockupStakeDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLockupStakeDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLockupStakeDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLockupStakeDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLockupStakeDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLockupStakeDeposited represents a StakeDeposited event raised by the TokenLockup contract.
type TokenLockupStakeDeposited struct {
	Depositer   common.Address
	Amount      *big.Int
	WeeksStaked *big.Int
	KhSec       *big.Int
	Id          *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStakeDeposited is a free log retrieval operation binding the contract event 0x1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f.
//
// Solidity: event StakeDeposited(_depositer address, _amount uint256, _weeksStaked uint256, _khSec uint256, _id uint256)
func (_TokenLockup *TokenLockupFilterer) FilterStakeDeposited(opts *bind.FilterOpts) (*TokenLockupStakeDepositedIterator, error) {

	logs, sub, err := _TokenLockup.contract.FilterLogs(opts, "StakeDeposited")
	if err != nil {
		return nil, err
	}
	return &TokenLockupStakeDepositedIterator{contract: _TokenLockup.contract, event: "StakeDeposited", logs: logs, sub: sub}, nil
}

// WatchStakeDeposited is a free log subscription operation binding the contract event 0x1a325385f16807e99fb688b597db78b00faee313dcf02e882dd16daab6fc3e1f.
//
// Solidity: event StakeDeposited(_depositer address, _amount uint256, _weeksStaked uint256, _khSec uint256, _id uint256)
func (_TokenLockup *TokenLockupFilterer) WatchStakeDeposited(opts *bind.WatchOpts, sink chan<- *TokenLockupStakeDeposited) (event.Subscription, error) {

	logs, sub, err := _TokenLockup.contract.WatchLogs(opts, "StakeDeposited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLockupStakeDeposited)
				if err := _TokenLockup.contract.UnpackLog(event, "StakeDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
